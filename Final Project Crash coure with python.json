{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project - Word Cloud"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this project, you'll create a \"word cloud\" from a text by writing a script.  This script needs to process the text, remove punctuation, ignore case and words that do not contain all alphabets, count the frequencies, and ignore uninteresting or irrelevant words.  A dictionary is the output of the `calculate_frequencies` function.  The `wordcloud` module will then generate the image from your dictionary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the input text of your script, you will need to provide a file that contains text only.  For the text itself, you can copy and paste the contents of a website you like.  Or you can use a site like [Project Gutenberg](https://www.gutenberg.org/) to find books that are available online.  You could see what word clouds you can get from famous books, like a Shakespeare play or a novel by Jane Austen. Save this as a .txt file somewhere on your computer.\n",
    "<br><br>\n",
    "Now you will need to upload your input file here so that your script will be able to process it.  To do the upload, you will need an uploader widget.  Run the following cell to perform all the installs and imports for your word cloud script and uploader widget.  It may take a minute for all of this to run and there will be a lot of output messages. But, be patient. Once you get the following final line of output, the code is done executing. Then you can continue on with the rest of the instructions for this notebook.\n",
    "<br><br>\n",
    "**Enabling notebook extension fileupload/extension...**\n",
    "<br>\n",
    "**- Validating: <font color =green>OK</font>**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting wordcloud\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/05/e7/52e4bef8e2e3499f6e96cc8ff7e0902a40b95014143b062acde4ff8b9fc8/wordcloud-1.8.1-cp36-cp36m-manylinux1_x86_64.whl (366kB)\n",
      "\u001b[K    100% |████████████████████████████████| 368kB 10.8MB/s ta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: matplotlib in /opt/conda/lib/python3.6/site-packages (from wordcloud) (3.0.3)\n",
      "Requirement already satisfied: pillow in /opt/conda/lib/python3.6/site-packages (from wordcloud) (5.4.1)\n",
      "Requirement already satisfied: numpy>=1.6.1 in /opt/conda/lib/python3.6/site-packages (from wordcloud) (1.15.4)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (1.0.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.3.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.8.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from cycler>=0.10->matplotlib->wordcloud) (1.12.0)\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib->wordcloud) (40.8.0)\n",
      "Installing collected packages: wordcloud\n",
      "Successfully installed wordcloud-1.8.1\n",
      "Collecting fileupload\n",
      "  Downloading https://files.pythonhosted.org/packages/43/19/014a32d2f435d29a5fb43a487d42a9afa2c188df56d152306de11a112178/fileupload-0.1.5-py2.py3-none-any.whl\n",
      "Requirement already satisfied: notebook>=4.2 in /opt/conda/lib/python3.6/site-packages (from fileupload) (5.7.5)\n",
      "Requirement already satisfied: ipywidgets>=5.1 in /opt/conda/lib/python3.6/site-packages (from fileupload) (7.4.2)\n",
      "Requirement already satisfied: traitlets>=4.2 in /opt/conda/lib/python3.6/site-packages (from fileupload) (4.3.2)\n",
      "Requirement already satisfied: tornado<7,>=4.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (6.0.2)\n",
      "Requirement already satisfied: terminado>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.8.1)\n",
      "Requirement already satisfied: jupyter-client>=5.2.0 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.2.4)\n",
      "Requirement already satisfied: prometheus-client in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.6.0)\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (2.10)\n",
      "Requirement already satisfied: nbconvert in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.4.1)\n",
      "Requirement already satisfied: pyzmq>=17 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (18.0.1)\n",
      "Requirement already satisfied: ipython-genutils in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.2.0)\n",
      "Requirement already satisfied: nbformat in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (4.4.0)\n",
      "Requirement already satisfied: jupyter-core>=4.4.0 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (4.4.0)\n",
      "Requirement already satisfied: ipykernel in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.1.0)\n",
      "Requirement already satisfied: Send2Trash in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (1.5.0)\n",
      "Requirement already satisfied: widgetsnbextension~=3.4.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (3.4.2)\n",
      "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (7.4.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (1.12.0)\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (4.3.2)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from jupyter-client>=5.2.0->notebook>=4.2->fileupload) (2.8.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/conda/lib/python3.6/site-packages (from jinja2->notebook>=4.2->fileupload) (1.1.1)\n",
      "Requirement already satisfied: mistune>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.8.4)\n",
      "Requirement already satisfied: pygments in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (2.3.1)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.3)\n",
      "Requirement already satisfied: bleach in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (3.1.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (1.4.2)\n",
      "Requirement already satisfied: testpath in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.4.2)\n",
      "Requirement already satisfied: defusedxml in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.5.0)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.6/site-packages (from nbformat->notebook>=4.2->fileupload) (3.0.1)\n",
      "Requirement already satisfied: setuptools>=18.5 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (40.8.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.13.3)\n",
      "Requirement already satisfied: pickleshare in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.7.5)\n",
      "Requirement already satisfied: prompt_toolkit<2.1.0,>=2.0.0 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (2.0.9)\n",
      "Requirement already satisfied: backcall in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.1.0)\n",
      "Requirement already satisfied: pexpect in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (4.6.0)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.2->fileupload) (0.5.1)\n",
      "Requirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat->notebook>=4.2->fileupload) (19.1.0)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat->notebook>=4.2->fileupload) (0.14.11)\n",
      "Requirement already satisfied: parso>=0.3.0 in /opt/conda/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.3.4)\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.6/site-packages (from prompt_toolkit<2.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.1.7)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.6/site-packages (from pexpect->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.6.0)\n",
      "Installing collected packages: fileupload\n",
      "Successfully installed fileupload-0.1.5\n",
      "Requirement already satisfied: ipywidgets in /opt/conda/lib/python3.6/site-packages (7.4.2)\n",
      "Requirement already satisfied: traitlets>=4.3.1 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (4.3.2)\n",
      "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (7.4.0)\n",
      "Requirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (4.4.0)\n",
      "Requirement already satisfied: widgetsnbextension~=3.4.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (3.4.2)\n",
      "Requirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (5.1.0)\n",
      "Requirement already satisfied: ipython_genutils in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (0.2.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (1.12.0)\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (4.3.2)\n",
      "Requirement already satisfied: setuptools>=18.5 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (40.8.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.13.3)\n",
      "Requirement already satisfied: pickleshare in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.7.5)\n",
      "Requirement already satisfied: prompt_toolkit<2.1.0,>=2.0.0 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (2.0.9)\n",
      "Requirement already satisfied: pygments in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (2.3.1)\n",
      "Requirement already satisfied: backcall in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.1.0)\n",
      "Requirement already satisfied: pexpect in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (4.6.0)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (3.0.1)\n",
      "Requirement already satisfied: jupyter_core in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (4.4.0)\n",
      "Requirement already satisfied: notebook>=4.4.1 in /opt/conda/lib/python3.6/site-packages (from widgetsnbextension~=3.4.0->ipywidgets) (5.7.5)\n",
      "Requirement already satisfied: jupyter-client in /opt/conda/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (5.2.4)\n",
      "Requirement already satisfied: tornado>=4.2 in /opt/conda/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (6.0.2)\n",
      "Requirement already satisfied: parso>=0.3.0 in /opt/conda/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.3.4)\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.6/site-packages (from prompt_toolkit<2.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.1.7)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.6/site-packages (from pexpect->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.6.0)\n",
      "Requirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (19.1.0)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (0.14.11)\n",
      "Requirement already satisfied: prometheus-client in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.6.0)\n",
      "Requirement already satisfied: pyzmq>=17 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (18.0.1)\n",
      "Requirement already satisfied: Send2Trash in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.5.0)\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (2.10)\n",
      "Requirement already satisfied: nbconvert in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (5.4.1)\n",
      "Requirement already satisfied: terminado>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.8.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets) (2.8.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/conda/lib/python3.6/site-packages (from jinja2->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.1.1)\n",
      "Requirement already satisfied: mistune>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.8.4)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.3)\n",
      "Requirement already satisfied: bleach in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (3.1.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.4.2)\n",
      "Requirement already satisfied: testpath in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.4.2)\n",
      "Requirement already satisfied: defusedxml in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.5.0)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.5.1)\n",
      "Installing /opt/conda/lib/python3.6/site-packages/fileupload/static -> fileupload\n",
      "Making directory: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/\n",
      "Copying: /opt/conda/lib/python3.6/site-packages/fileupload/static/extension.js -> /home/jovyan/.local/share/jupyter/nbextensions/fileupload/extension.js\n",
      "Copying: /opt/conda/lib/python3.6/site-packages/fileupload/static/widget.js -> /home/jovyan/.local/share/jupyter/nbextensions/fileupload/widget.js\n",
      "Making directory: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/fileupload\n",
      "Copying: /opt/conda/lib/python3.6/site-packages/fileupload/static/fileupload/widget.js -> /home/jovyan/.local/share/jupyter/nbextensions/fileupload/fileupload/widget.js\n",
      "- Validating: \u001b[32mOK\u001b[0m\n",
      "\n",
      "    To initialize this nbextension in the browser every time the notebook (or other app) loads:\n",
      "    \n",
      "          jupyter nbextension enable fileupload --user --py\n",
      "    \n",
      "Enabling notebook extension fileupload/extension...\n",
      "      - Validating: \u001b[32mOK\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "# Here are all the installs and imports you will need for your word cloud script and uploader widget\n",
    "\n",
    "!pip install wordcloud\n",
    "!pip install fileupload\n",
    "!pip install ipywidgets\n",
    "!jupyter nbextension install --py --user fileupload\n",
    "!jupyter nbextension enable --py fileupload\n",
    "\n",
    "import wordcloud\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from IPython.display import display\n",
    "import fileupload\n",
    "import io\n",
    "import sys"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Whew! That was a lot. All of the installs and imports for your word cloud script and uploader widget have been completed. \n",
    "<br><br>\n",
    "**IMPORTANT!** If this was your first time running the above cell containing the installs and imports, you will need save this notebook now. Then under the File menu above,  select Close and Halt. When the notebook has completely shut down, reopen it. This is the only way the necessary changes will take affect.\n",
    "<br><br>\n",
    "To upload your text file, run the following cell that contains all the code for a custom uploader widget. Once you run this cell, a \"Browse\" button should appear below it. Click this button and navigate the window to locate your saved text file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "279f60c83e7340c1a6b1954eb4cc4e2c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FileUploadWidget(label='Browse', _dom_classes=('widget_item', 'btn-group'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Uploaded `Text.txt` (4.83 kB)\n"
     ]
    }
   ],
   "source": [
    "# This is the uploader widget\n",
    "\n",
    "def _upload():\n",
    "\n",
    "    _upload_widget = fileupload.FileUploadWidget()\n",
    "\n",
    "    def _cb(change):\n",
    "        global file_contents\n",
    "        decoded = io.StringIO(change['owner'].data.decode('utf-8'))\n",
    "        filename = change['owner'].filename\n",
    "        print('Uploaded `{}` ({:.2f} kB)'.format(\n",
    "            filename, len(decoded.read()) / 2 **10))\n",
    "        file_contents = decoded.getvalue()\n",
    "\n",
    "    _upload_widget.observe(_cb, names='data')\n",
    "    display(_upload_widget)\n",
    "\n",
    "_upload()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The uploader widget saved the contents of your uploaded file into a string object named *file_contents* that your word cloud script can process. This was a lot of preliminary work, but you are now ready to begin your script. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function in the cell below that iterates through the words in *file_contents*, removes punctuation, and counts the frequency of each word.  Oh, and be sure to make it ignore word case, words that do not contain all alphabets and boring words like \"and\" or \"the\".  Then use it in the `generate_from_frequencies` function to generate your very own word cloud!\n",
    "<br><br>\n",
    "**Hint:** Try storing the results of your iteration in a dictionary before passing them into wordcloud via the `generate_from_frequencies` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_frequencies(file_contents):\n",
    "    # Here is a list of punctuations and uninteresting words you can use to process your text\n",
    "    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n",
    "    uninteresting_words = [\"the\", \"a\", \"to\", \"if\", \"is\", \"it\", \"of\", \"and\", \"or\", \"an\", \"as\", \"i\", \"me\", \"my\", \\\n",
    "    \"we\", \"our\", \"ours\", \"you\", \"your\", \"yours\", \"he\", \"she\", \"him\", \"his\", \"her\", \"hers\", \"its\", \"they\", \"them\", \\\n",
    "    \"their\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"am\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \\\n",
    "    \"have\", \"has\", \"had\", \"do\", \"does\", \"did\", \"but\", \"at\", \"by\", \"with\", \"from\", \"here\", \"when\", \"where\", \"how\", \\\n",
    "    \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"some\", \"such\", \"no\", \"nor\", \"too\", \"very\", \"can\", \"will\", \"just\"]\n",
    "    \n",
    "    # LEARNER CODE START HERE\n",
    "    frequencies = {}\n",
    "    List = []\n",
    "    Words = file_contents.split()\n",
    "    \n",
    "    for word in Words:\n",
    "        word = word.strip(punctuations)\n",
    "        word = word.upper()\n",
    "        if word.isalpha() == True and word not in uninteresting_words:\n",
    "            List.append(word)\n",
    "            \n",
    "    for word in List:\n",
    "        if word not in frequencies:\n",
    "            frequencies[word] = 1\n",
    " \n",
    "        \n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    #wordcloud\n",
    "    cloud = wordcloud.WordCloud()\n",
    "    cloud.generate_from_frequencies(frequencies)\n",
    "    return cloud.to_array()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have done everything correctly, your word cloud image should appear after running the cell below.  Fingers crossed!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYEAAADKCAYAAABDsfw/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzsnXd4HNW5/z8z25u02lXvsi3LcpMrxgVjm97DJSRASC7phfTk5hdIuJeEkEYCNwUSSAhwSUgghBJKTDE2Nq64d1lW79JqV6vtbeb3x1grrXfVBYig7/Po0e6Zc945u/vOec95qyDLMtOYxjSmMY0PJsT3egLTmMY0pjGN9w7TQmAa05jGND7AmBYC05jGNKbxAca0EJjGNKYxjQ8wpoXANKYxjWl8gDEtBKYxjWlM4wOMaSEwjWlMYxofYEwLgWlMYxrT+ABjWghMYxrTmMYHGOr3egIAgiBMhy1PYxrTmMYYIcuyMFEaU0IIjAeCqEKfX4whrxB9XhFaezZaqw1RZwBkpHAYKRIm7Ogk7Ooh7HIQ7uki0FJPLBh4V+ZoXXQuhvwiNBmZZ+amR9QZkMKh+F/E7cRz8jDBjhaCHW3A1JOHals6UiCEFAgiqFSYLzgXz6vb3+tpvedIL12Au+HIpNHT2rMxFs2I84w+Jx9RowNRTOAZX+1JQo6OKc0zE0VJ5aU4O0/gcTaSW7aSoNeBKT2fttptzFv5aar3PkEk7GP+6s9xdPtDANjzF6DVp9HZuAcpFqFw9nq8rha87lZUKg2hgBsgPkZnsDJ72Y0c3/knYtEQokqDFIsk0BzcHyCn5BzUGgOmtFxaT28lI3cO9tx5HNn+INnFyzDYTlK+KpPjm7vwdIdY84lSWo656Wn003Haw0W3zuLAC20s/VAhHac8BL1R3B1BsmaY6K7z0V7dx6qbSuiq9xGLSFiydMiSjKPBT3t1H7Ho5P/W70shoMvKpfhjX0JtMg/ZR2VQozIY0aRZMSVckXHt3Y6n+gi+xtMwybmTNFY71qpzSJ+/BI3VnnpuegMqvQEAXWYO5pmVAES9fXhrT+CpPoL39IkR52apWEDhhz85qfMHaHj0VwRaGwFIv3oD5jVLQRRwPfEi1usvJVTTmDQm95L/IGPZmkmfSz/q/3QfwfbmYftYF51L3hUfSWqvfeDHhF2Ocd87/6obSV+4PKGt9ZnHkD0hStbdRMDZTtfhzeOmr7HaKfnYF4bkF0jmmX7080z7S0+Nipcrv3fvuOc5Gozmd5oIRJUGBAFJiiVd87nbyStbRXtd4gYlGvaTWbqCjobdCe0ZuZV0Nr5NLBoCQIpFRrx/mq2ElprNhAIu0uxlADjaDpNbcg6SLDHvwhz+9cvq+GKt1orMvyCHN/9UTzQkEeiL4nGEiQRjWPP0dNV647Rnr7bTcsxN81E38y/MYddTzViydJQuzsBWYKDlmHtsX9Yo8b4RAuZZc8m/6kZURtPInYeFQMayNfEFK9jRQv3DE3swBFGk4r9+iqCe2NepNqdhrVqBtWoFADX/+99Efd4RRr2zMCyqpPU794AggCzj33/8PZ3PeDDj8/+P2gfuJtLXO6l0jdnFtO/bSMaMRWMaJ4gitnPXk3XeJZPKM1IkTO39P3rPeWYiEEQVshQjGvGj1VkA0OnTCHoVIa4zpBMJ+YhFg0ljgz4HR7c/SOncy3G0HU645nElC6aAp4vMgiq6mvaOen5BnxODOQeDORuPqwmztQC3ow6t3kJh+QZ2PvEI13x/Lj1Nfo6+3kk0LHF0UycAGQUGihakE/RGEQTY9PtabvpFFVsfaTjz2QV0JjXGdA297QHO+3gJDQd7E66FfNFRz3W0eF8IgfT5S8m/+kYQJt+O3Xtg14TGq4wmCq+7ZcIPcypMhYdZW5RL/o+/kdTedvt978FsxgdBpcJ27no6X312Uul2HnidorUfoXXnc2MaV/yxL2IsnjmpcwFw7ds+JXhmPLDnzceWNxetzsKxnQ/T3XKIimU3YsutRKUx4HbUAeD3dBEJebFmz8brasJgzqKwfD0tNZux583HnjcPQVTh62vHml1OYfk68mas4sTux1Br9BSWrz9rzDwqz/kEsWiIzqa9uB21CfNSa/QJ/TsadzN76Q1EQl6aqzdhthYA4Ow4QUnlpfQ0+3nmzmOo1AKxqMxL95xMoPf41w4kvH/i24cAEnb5xzd3odGriASV086BF9om98s+C8JUSCU9kmF4zm2/QBCHEQCyTLjXSbCjBTkSRtBoUOn0iHojhvziIYdJkTA1v7oTKZS8qxgNNFY7JTd/EU26bdh+shQjcsYuEQv4EXUGVAYDWlsWapNlyLlV//y7w9JV6Q3ocwvRZNhR6Y2oDEZUeiOi3oA2IxO1yYLakpY0LtLXS8zvJRbwE3b1IAX9xAJ+YsEAsaAfX+1JpEhYuUd66vnF3J6E91NZHQQgRyOc/u1d41okh1IH6TU2RLUGKRoZtTpIY7Uz69bvjdhPlmL46qqRQkFkSRqRZ0Z7CpjK6iCVWkcsFk5Qa/Xr6UcLUVQjSWPbLQuCiCCqxnSfqYIPhGFYUKmHFACe6iO4j+5LWLTOhtqShi4zF1NpOcbScgx5RYpqA/CcODR+AZCWQcnNX0KTnjFkH/fRffQd24+/sXbo+ZnTyFp3OZbyeQmqLte+kQ2vsWAAX0MNNNSkvG4oKKH0lq8ltTf/7Q+EuttHpA8g6LREu3oS55w9tO46YX5+L55Tx0bVdzS0JgJBrcF2zvl0bX5pUuYDIKpUyLJENOgZuTMDPDMU5GiUvpOHRuQZy+z5mGfPT+CZiZwCeg/uHrnTKDGR36lfNz8YY12YxyoAAGRZQo5JYx7374IpLwQylqxM2d7w2K8JtDSMOD7q6SPq6cNXfwpQds+F138KY/EMeg+OTxUkarQU3fDZYQSATO/B3YqxbqT5eftof/FvtAsiltnzsJ2zFn1eET07x29onExk3XoT7f/zmxHbUiHs6qH9pScBmD1HzbXXG7nvZx4uvVKPJMHGFwP852dMnDweZdUaHY/8wcua83V4PTId7TEyM0WKStScPBGh3Z16QRwLMpaupmfnG5PmHdZx4HUAMueuittMhsJIPNN7cBfdb24k6u0b8b6eU0fxnDqawDMT4Zf+32gaH0xM6WAxjdVGzsXXJrW3v/zUqARAKsSCARofv58Td38Lf3P9uGhUfOen6LJyk9ojvU5qH/gxJ+7+Fu0vPYVOMLBQdx46wUCZZj4q1MzULARghmYBpZq58bGl6jl4qo/AXzdTf8+dxPzexOtnXvf/H0wnR1VMibqSEvVctIJ+XJ/pnUbpDDWePolwWFkoa2uiRKOQn69i+9YQu3eGqJyn4cjBCJdeoXyGFat1PPWEn2XnaMd1TykSJuod2KWLOj0zv3Q7omZ89IaC4/iOYQVA2txFI/JM+0tPjUoAJECW8FQfofHx+ye0A0+79DxUFuVEkXbZ2vh/0WhAUKvjr9OvXIegV767tCvORzQaSLvi/HHfdxpTA1P6JGDIS9bny9EIfUf3vwezUSDqUi+yMb+Xpid+R9g1oDrJVhXjl/rIVhUhIBAjinzGp1tCApLVec3RavLUZUTl4Y/B/XRkZLSCIWlsZyzZjXM8UGfZKPz19xPaBLVqzHROV0fJzBSZv1ADwIdvMHLvz/rYtiXEt2+zYDKL/OQHfYTDMuIZ8v98JsB3/zsN1dhvB4Aci+HY/hq5l/xHvE1lMGFdshLn7jfHR3QQsheuj78eyiYg6vTkXJS8kYEBnim8pARRV4YUitH84jFioSiFl1fS9PxRZtywJN5Wel0V9U8doOwji+NtM29aiqe+B1ORlYZnDhMLROJjCi+fS+urJwn3Dn/y8WzaiWnVYiUORKfBsn4FCKCfN4tIS0f8NaKIHFROZKJRj37eLETjwPOwdtl38QW62Xfs4ZT3WTL3FszGXLbu/SkA5yz8Immm/KR+r++8I+H9unO+x5Y9dye0qVV6zln4BQ6dfAJfoGtYem5vC28feRAAu7WcxZWfGPgNYmH8wR66nSdobN+u2CTOYM2Sb6HXWVN+lv45VlXcRJat8kyrjNvbisN5kuaO3URjiarm0cxvMAw6K6uXfJNt+35BKDzGDcIYMKWFgMaabHANtDUNqSt9N2BfsS5le8s/HksQAABqQc3pyCHKNPPok3ooUVcSkgMUqSsIywFUqClRV9Ida8EsZGAQzJjEdAQENII23haQB3Z5/W0KndmEZD+uWCczNAuxqXLjY0cDQRS4/r5zSM83IksyrmYfJ19v59jGlnif5i/9YOxfUgrU1Uapq1X0tUcPR/jnM8rCtOWNENu2hogNUuV+89YBV8677hi/b7RKp6f34O4EIQBgP3f9pAiB0RiD7SvWoTanMK7LcpxnRN0MWl+pJm/9LOzLivDWKXxknZsLAvE2UadiwXcuwNvojLeF+4LobEYEUSQWOLNxODOm8bnDFFw8h6g3RPuW00POUT93JggCotGAHIrg2bybtMvXorIYiZ05IagsRsL1LaRdsoZIezeSN4D/7SOoMwfUW4GgE6N+aCcJnTaNYMgVf1/btIl0SyGl+WuQgca2t4hE/CN+pyAwr/w6DLqMuADop2c02CkvviiBnj+YHCPS522h19OETpuGLX0mM4o2kG2fy65D9yf0k+QYHd0HR5xRW9c+orEQ2bZ5zCy+kMLcczh48s94fAO2t/75adQGSvLXDDs/gGz7AmRZJsc+n6b2HaP4XsaHKS0EUu26o76hjXCl5kX4Ii4kYvSElIUsz1BOe6AGUVAxy7KCNn81hcY5eKI9RKUwwZiXDF0+nogjPma4+WQsPy/lNX9TbVJbfeRYwv8e2pGR0QkGslSFNEdPISAgI3M0rBiCAzEvAiIyEi0MGHwbIop/fn+/1ujp+FiAY+GdAPGxI0GtU3HD/SuJBKI07HEgqgXspWY+9NOlnHitFSmm0DWvXYZ36+j9qMeD2DC2PGki9jpBSOlUoDYne0yNBxpjGuml81Fp9XQefCNln6H4pWfX5jjPSKEYeetnAaBN16NJV052vcc7sFXlx9ukUIzjv9lK8dXzB/oJ0LWjAXOJjbKPLMLb6IrTsS8pQhAE1GbdsJ8jcKgaQaVCjg0EYPW9vDX+OnSqYaDv0RqQZQKHq5V+/xro5w/2kG4pHNJDR69Nw9F7auA76D1FT+8pinJXIMsSdc2pv8OzMaNwHVkZczjV8K+EdoWecn0kek53PaebXgVApdKxdO4tpJkLk/pJUoTjtSO7ADe0bsUfdFLTsJHC3BXMLr2MRXM+zu7D9xOO+BLmB1CYs3zEz5uTOZ8+Xxs5mQs+uEJAjqZSiQztEeUOd5Kjn0mz/ygAWtGIRZNJe6AGSY4RlUKEJR8xOYpeZcErOePjwtLAkVlUi0jR5NUnfcGyeNTmYIxWl9u/YIfkAC3RmoS2xH6jW/kmMnb1p8uxlZj49UWvJLTnzEnnnI/PZNejys7RcsHKd1wIvJNQ6Q3EgoGk300QReQJSRgoOPdqQn0O2vduHPb+ZyPq7cOx7dX4+7q/Jas3XUcU3/C6v+4fVVug04NjbxOyJNO9e0AVKKhF5BS8fDYGC4DhOw5t+/AHewDhzA69O+m6SqUjEHQlDxwDMjMqmFG0ntaufZO2MMZiIRra3mLh7BsmTEtGprljF1qtmbKC8ynJX0NN4ysjDzwLBn0GaaZ86lu2UFa4DoPOSiA0ucGO/ZjShuGQozOpzTJ7/pCGPY2oJxDzUGJahErQMMO8hK5gPbmGWRhUaaRrc8g1zAIEaj1vn3mtjOsfM//qUhZ9ZEYSbW2GPUmtAIqhufaBH0/sg74HWP2Z2fzlc8kPUedJN+turYy/V6WZSbtsbdLfePHx25TgmuUXWfno1/O47st5rLjUyswFRj5+WwELVltYdkE6511j49N3FnHtF3Pj/T/9gyJE1djcotUWK7UP3I0UTnQ/LPvsf8VdhceLhjf+TPvejZhzy1Je12akdqWtfeDHk67SzFq6AWSBrKWKnSJryXqylqxHVOkQVO/OXq+nV9nY2K2zyEgr5YJz72T9iv8mM6Mi3sfpTj4xjwYqUcPKqq9QUXo5b779E06MYnc+FpiNOSN3GgNqm17HF+imJH98sTMLZ99IKNxHbfMbhMIeFlbcOKnzG4wpfRIItDYktQkqFWnzl6SM9O0K1qMS1MRk5Sh6su+thOsHnC8nvD/kOiOhI8pYACkmYcxIPj6bZlYmtcGZWIP30EYxXohqEWueAa0x2eqq1g20xfq8CUf+yYJaLSCIArv+5eS6W3N56RFFt5uWocbZGcFgVrHpSQcNJ5QTms4g0tsdjaupRgtRpyMW8NN7YCe2QfYcXWYOlooFeE4eHnrwSLTPLK4GewHejmRPs6F45p3gF397PfZFa/C1DZqHAObi2QQd7YRcXUMPnqw5BBVbhl6XgUZjwuvvJBoLYU+ficOlqI8CofGdBGaXXobJmE1P7yki0clx8RUEEa3GTLatktKCtUmGXFAM0BeuvCuhTZKivLF7ZFtZOOzFZMga87yMejsWUx4tHXsAGYfrJAU5yzHqbfiDzjHTGwlTWghEPX2EXQ60GZkJ7VnnXTJkuod+ATBeHH+5iYzC5MR0ptLylP37ToxsNAJYXKVly8updxvpBQMRlhdv0PPdb6Uzd46Gp5/zc8ddvbh635lAlht/v2rEPp7NkxdIBFBzwMeN387Hatfg6o7QWhuM7+41WpHiCgM7XnKx5mobF3w0k97uCC8/2s3RnR4y87UUzNTTWjv6AD9Rqwj0nl1byFi2JmFXnLn6ogkJgcy5w39/Q/HMaGAuTMfb4sZUkEYsGCW9XHkGuve1krW0ADkq0bV3wIbla2sge/mFOA5sS6Cj1ptQG0yMc+0dE6LRIJGoH702Db0unV5P0xljqeLWLMsSwdD4DP0ZaWV0u06SlTGHvKzFtHcfGHnQMCgtOI/SggF7TTDUy5Ga5LieVIZhSR7d8yiMM81NTuYCALpdJwDocp6gIGc5OfYF1LdO3KHhbExpIQDgPrKPrLWXJLSpLemIWl3SEX8yMO+KEgwZOvY+fiqhPVX6CTkWxd9cNyq6p+uiXHezoid9/KFMXtkU4M9P+hL6rF+r58nHsti2I8jnv+rkZ3dZmTcniwuv7mS0KtvR4t61L4/cCUCWMZ+vpEyQozEirZ2EG1rHfd9dG3t5+3V3Qkrc//2asnutPTLgGbLteSfbnh/Y9QR8MZ77fceY79evOox6++g9tIeMJQMLtz63APPMSry1J8ZMF0BQKe6usXDqnelQPDMaFF1czslH91G4YRaBLi+yLONt6gVZJmtxPk2vnDprhEz983+Iv+ve/94EG/qDTnRaCxZTPvWtW4nFwpQVnI9em04w3Ic8ygX0bOw58iCCILBy0VepKL0cp/s0ofDoIrVToc/bgquvnkg0iMfXjtNdm3JuozUMp4JOOz4HhBz7fAAWV/5nYnvm/HdECExpmwAMnT6h7FPfGDYv0LghQN22xJQKKoMRtSU9qWugrRk5OrqH2uOReH1zkNc3B4nGZBqbovH3/bjztnRq66N8+GYHz7/k52OfcrBkkZbrr51o5tRk+HvDSX/RsETpuVl89bUBoavOzIj/aQtzsd9yLekfunBC934ncqIPBVGjib/u2fFGkjE4c834P0vnwU10HtyEqNIk7fqG45nRInt5IYFuxT3YPj+X7HOKkKISEW+IYM9oXCnffQSCPfHFz+Wup9fTSEyKYLPOJDgBo3A0FiQSDXCi7p+o1XoqZ1wzoXk63fXUNL5KQ+tWenprxi2choJBZ8WgzxjS/XMoGA2ZmI05eP2dtHXti/95/R2YjbnjUi+NhClzEtAKBqzqbHI1ZQiCwCGfspOJ+b34m2qTsi5q7dmUfvLrAMiSRN+x/bT984kJz+PYC41kFCWqg0xlFSn7ekapChoN1q7Ws2ihlus/3k04oiyS+w6Gee5FP7d9M42/Pe0bgcLYoDWpmX1+Llf+YDEhX5Ta7V0svKqIB658nZ8ufyHer/cfryaME1Qq8u76Ku7nXp/U+bxTUIoMKYi4ndT/4R5mfP479HuZGQrLKL7pCzQ98ftx0c9dcjFA0iIyUZ6J+iMUXlTO8Yf2kLVYCTASRAG1UUNGZQ4Rb5i6ZycnL9NkwuGqITezivrWN+M69tONr1BWuI62zn0Tpt/tPMHWvT9l5aKvsm7599jy9t0jD3oXoRI1zCjaQEn+GgJBJ3sOj42vqipuJCaF2XPkQSRpwDtSFNWcv/w2FlbcyM6Dv57UOU8ZIRCRQ6gFLbWhg/hiia5QLU8/QtENnxty5y+IIukLlqG1Z9N7cDeeEwcnlB8mqyKd3lYfsnSmMESKTJwAEc/kFXlIT1cWJacrcTFx9UrYbZN/YPvWm5fjbPbx2C3baD/eCzIsvKooyTXWeu1FICpzE1QqdHPKCBw8mYpkEgwFJZOStTLs6qH2gfE97MJZ4cYhRyeek0ewzFkYbzOVzcaQX0ygrWlstEURV+0BLAWzk3IHTZRnav52KP666ZVTCeqfXbcP7ZI6HkzmbxQ4Yxwe7AXk6D1FRdkVSUZhu7WcdEsRKlGDDMwo2kAk4qO5Y3g7VDjio7r+JeaXX59Ez6i3JdHzB3vo6R06WG44iKKGuTM/lNR+toqotGAtMSlKXmYVarUef8DBwZN/JhobUFn3z0+jMaFS6ZLmZzJkYzJk09lzNEEAgGKM7nHVkG2fN67PMRymjBAwqdKxqDIwiWmggZrgwK4hFvDT9JffUXjdLZhmpN5hgaKDNeQXk3vJtXhOHcV9aA/e2tEtWP1YctMswp5IXAAAqPTGlH3HnOtlFDjba1HgnSkeePzVVmavy2Xxf5SSltNJ/e5kv26AaI9rYFIxCf++o4Rq37nKUZOOFG6gju2vJwgBAPuqC2h5+pExkc6u2gBA0NWZ5D//bvLMVEK/h5DbM8AjgaALf7AnSQjMLL4wIY3CjELFvXUkIQDQ4ThMjn0+eVmLaD9juB2KntvbMn4hIKjIz16a1H62EMjPXoosSzjddXQ5j9PefSApYG6k+eVkKraArp7UJ7wu5/F/byHgjbmoDuxBJajJUhclXZfCIZr++hC25WvI3nAlglqTgooCQaUmrXIRaZWL6Nr8Er0HdhILjE6H6mn3I6oTd96D9cqJc5o8V7/eMx5AtozEnavVKuJ0Tr530PO370OlEbnizsVcddcStAblvhUX5LH78YFdnHfrXrQl+aisaQQOjU2gTgUIKYRAsCM5MtxSMX/MtLsOb0FnsaHWJ9ts3g2emYqIRANJuX8Adhz4VVLbnsO/GxXNs/MG9eNQdaL6d8/h31F2VSXOE124T/cw5+OLcZ7sprexG0O2ifKPVgHw+m/uYN3913D6VmXc2l9dxdavKSrQ9Q9ey9avvkDJZbM51fokXTtbEq4XnF+GIdOESq8mFozG59DfJ3t5IdbFduS/xTjvvivYc+cm8teWUXLZbA7c+xTuwz1J9+xHXfMb1DW/QdmVc5htqeLUXw+RPstO3spi8taUsvWrL1CX89dRfWdjwZQxDKsEFbmaGSwyXkBQHkr/LeN8ext1D/2c0e6Ps9dfwayv/Dc5F14zZAGXwbDkGjFlJaarGCrYZrSeHqPBqdMKrXlzExePObM1HDv5zhS7iEUk/vm9fdy37l889fU9HHq+ifM+P4eP/ubceB/rtRdi/+z1mFYsRDczWTj/+2DsgWOiSoPelofelpdMbRieSddkMzdtLTrRRJX1InSikRz9DEpNVQltwpnHs8y0CI2oQxRUzE1by9y0tQlts8zLKDVVxft+kJG7spjCDYn2w3BfiNxzixFEAVEloMswEHKndjNu3VxL2VVzhqTvrnWSf34ZseDwz75Kp0YQBKSoRO7KYg7/dmfSvIaCbUEubW81AJC5MHdU85oIpowQ0IsWMjUFeCUXvdHhA1vCrh7q/vAL+k4cGlXov6jRYltxPjNv/R6Z5108bF+tSY3fOUrX00msytbZFePAoTA3XW9Co1YWpMVVWubM1vDPlycnOGYoxCISp7d28MId+7l33b/wuwZ2q8ZlC+i4834cDz2F5ZLUeXDej0jl2jtUhO9QsM85F63FhqgZPjdPAmSZAoOSuypHX4Y/6iZHPwOdqKiPBrcZVBZmmZcBAnZtIQZVGp6oA0+0J6EtLI2vMNK/G7RpOiwlVvJWJtsOVRrlpBtyB8k9txjn8dRrTPfBdjKr8pK0Af3wtrjZ84NNrP75Zai0qdPbFl0wiw1/uJaavx8h4gtjKbFiq8xOOa9UENUiUkRZ18Qz8x5pXhPBlFEH+WK9nAzsxqIavlRjP0Jd7bQ+89igFoH8a24ibU7VkPV+RY2WrLWXkrn6QtpffBL30WRvhZpNbZSszEYQhbhdIDZE9bFUeWEmgnWXd3LJBQZefT6buZUannrGT+m81nckWCxnTjo3P7Sa6s3teB1BBEHAnKmn5JxMnvrqQCCeKtNKznc/C4CmKJfc738RgI4fjXyUD7Q20vBoshqgaNlVNO99gfT8CtLyyuk4/ia2ssUE3V24W09in7EUZJlgXzd+Vxt58zcwY81NNO97kdx559O89wVspYtxNow/YKjx/35L2ae+iT5vIGnYjM9/d0wF6buPvDlkjeHheOZ42+gisAUETnsT8zb5osluloPb6n1j91g7cfc3xzxmKmLZbevY/LlnSZ9lZ+5nliOFolR8bBEzr53Hzttfoeprq6l95hhr7rmMw7/dicaspeLmxZiL0qm4eTHVf1b4adcdr3HRY9dz6Eyfwdfz15ZRsLaUqD/CUKV5mzed5tQTh1j09dVIEYnNn3uWiC9M7+ke5n5mOcf/+HZC//55RLxhqv98gMO/3ck5d2wg4PCx9ydbmHPz4oR5nX766KR+b1OmxrBK0DDHsAJntA2zaKMmOL6kZSq9gfSFy8lYuhqtbRifWlmm9dn/o+/EoYTmeVeVoNaqOPSPgZ2ifeUGsjdcmUSi+ck/4j19fFzzfDcwVHnJuofu4aP3zMLd5uf52xMFoSAK3PzH1Tz+KSXlhjon9e442pmYNjtVjeGRhACAJWcvG34rAAAgAElEQVQmap2RSNBLRvECmvf+E/uMpZizSgj73bQf2UT+wovQGCy0HXqV/IUXEQl6MVhzqd36eALdVDWGHdteoXtr6gReljkLKbzuloQ2556tdL6WuKjnXXkD1qpzEtpGqjE8VXkmlSfQaITAzM+fT+2DSqBS4YeXorEaqf/jNlY/eyuBdsXj6cSPXiTQpgjQWV/ewOnfKlkytTYTKx7/DP4WJ46tNTT+RdlklH1yDbYVZchRiYPffBIpPHnq1XcSokaFFJnk6M1x3uffqsZwuspOa/gUvdEuZuhH1t0PhVgwgHPPVpx7tmGZPZfC6z+duqMgkHfFRwm0NRFxD+ykNAY1B59KTHI1VPpqtSk5vcT7BfnzrLz28yNJ7bIkU7hw4DRmXJLaG2FC+YQG7TtEtVJI3NtVj9/ZilqnqEW6a3bjdw5EJncc20Ik6EWSorQdfg1b6eLx3/8MPCePEHJ0osscSOdhXXwuju2vJ1bqklI/iMPVE/h345mGx3eitugRRIHcS+dz4MuKQVSKSuz/0p8T+oo6NdoMI6JWHV/YA+1u9t/6F5Y//Ek6Xj2GSq8hfUEB+77wOCqj9n0jAIB3RQC8m/eZMkIgLIco1FaQoylFZJylpBIg4zl1jJa/P0z2hdck5R+CM1WfLr6Wlr//Kd6m0auYe0Uxx18a8Bkfyq1Pk4KmtjiP7G/eQripDddTG4k6XBTedxuhWoVe172PYf/ktagy0hA0Gnw7DpBxw+Xx66GT9bhf3AKAYX45gaM1STQjLZ1oSwvI+MilyLJMYN8xEEU8r+8ElUjenV+m/Y7hA0rC/ijp+UYlRuAshPwDD6TlwpXIoQjhxlZ8u8efZwfAWjgPk72QaEgx/BcuvRKVWkfT3uexFs1DZ7bRXbMHgKzyFUQCHjpPKMIm5J38xFkg07NjE/lX3xRvETVa7CsSC9JLo4wKH4yx8Mz7ATF/mJlfXIeoVdP4513EgkM7K9hXzMBzqhPb8lIc2wdcMw15VgSVQMwfJhaMoLWb4rSnMTxsVyrOGrqSHNrvf35SaU8ZIeCNuTgZGF/h9+HgOXUMb101uZdeh7VqRdJ1y+x5aO3ZhHsUQ5HGoMbnSNTnRs6qGNaPodRNwZN1OH7/JPZPXYfziReItHbS9QvFB11XUYocjsTfIwiYz1s68L6fdkk+hsWVShGPs2n+5QUyv/BRun7xCFGHC8uG5M81Eo6/2sbld1RRv6ubkFd5oHVmNeVrcznx6sAOvPVbP0NlTUM3swjTykXI0SiRlk4CB8eeb6e35Tju9uq4V1Xr/pfjkba9zccQ1VqkaJieun301A2oqdoOvxZ/3a9Gmog9YDD6ju0na+2lCVXszi5IPx4vsLHyzPsBptJMEAVqfjUQLS6qRZY8cDNyTOLAV5TTQdb5FTT9bQ9FH1kWFwKGvHSW3P8xDn7zSaI+xfHi+A9fYPGvbqTpyT307BhfiukPCiION2qrGcdTH8AEcpMBORql/cUn6XzlWWZ84bto0gbXDRXIv/KjNDz2GwBaDzrImm2l6e3uuGE47HIQ7GhBn5tYeSitsopOSxpRT+KuTz9nBnl33kr7D3+HoFWjKcgh+9ufBKDrF48gaDTk3vFFop0OXH99OeG67639+HYdwnbzVUTautEW5yXRtKxbjnfbPqKOATWW5YJzMSyaM+oc+RvvPsTGuw8xe30eZrvi3eLtCdGwx8HRlwf86PN/9m0EtYpIcwferW8nBNGNHXLCgrr2mnTefM7F+mszOLnfz7INabh7orz1Ui+Vy0xYM9WYLCp2veJmxcVpNJ0KIQhQPFtPe0OII7vGX1w9PiNJovb3P2XWl78frzjWX5D+9G/uQoqERx1jMhjD8Uyq9Hvf+5YVSYK3D4TIzlQhy1BUoOLnv3Zz7902WlpjFBao+O6dLn54ewYPP+6hpk4R3t/+cjq/+K07/vqRJ7z0OGPcd7ed9s4oP//15ES2u/Y1JLWdrQ7KWldB2OXDW9NJxB0g6/zZuI+0Emh3c/wH/2TeD65h7+ceQ9So8DX0cODrf2XBT64j4vLTd6I9if5gZBTNp3zdJ0c118Y9z9JZPZBK3mgrYP4VibYPWZaIhYOE/b34elpwNh7E3VY9Im29JZNZaz+B1mRFpdETCXjw97bjbDiAoy7Z2cRaOJfZ6wfU0u3HNtO8/8Wkfstvvieegyrsd3PwHz+MX9MWZoEsY5xXgnvL5BaXmTIuov3ImZPOZd+vwppvZOUt5cxYlY05U/Hbv/IHi5l7qVKUZMaqbD7002WodSou/s4CCqts6MxDB5CBksfdfSg5GlGfN+D/nl5gwu8MJi12/ubkfPEA5plzk9qCJ+vo/OkfEc6kW+g/CfTv9oNHa+i463cEDlWTcfNVCdd9uw6hsqahslnRFGRjWFyZRDPm9qJKT9QtezbtUmjc++iw38FgqDQi7nY/B55pZP/TDZw64yl0/X0DJwvvlj14Xt9JsLoedU4mmrwsNHmTs5utXGKivMpIeZWR9sYQKjXklWhZcWEaM+YayMrXsOnvTi79mJ0d/3JTd8xP6Rw9W//pmhQB0A85Fk2qOdxfkB6GqnA3MobimVQIBGS6e2Jcc5mRhiZFUPYv3qEQ3PuAm+rTEaoWaLnrHhdf/mwaGdbhH99HnvBMmgAYCv0ngSUP3Iwh30r2ugoc25TTq+OtGrLWDfi2+5ud9B1rJf/qRZjKslj6+4+z5P6b8ZxoH1EAvBMQBBG1zogxI5+sWedQccHn0Joyhh2TN28DC676L4y2AtQ6E4KoQmuyYi2oZMbqm9CZR/ZuNGcOkf5mmNTTPU9vpecf2xB0w69x48GUOwnMWJmNFJPxdAdJyzWw89EaKi7Io+Wgk65TfeRWpHN8YysavYqgJ0IsIiHFZFoOOZm9LpdTW4ZPN+ytqybzvMTU1IMDe4w2HVKKLJf+plpsKerFWuYspPdgshpLCoYwrzsH366zXPYG5ZgJ1TZjWpkc3GNcUknfi1vwbt9Pzn99isCBEwk0/XsOY73+EvpeepOYe3yLob3Mwo0PrMRaYKSz2s0Tn9+BzxVi2UfKMGcPBMv1/WuroppaqKTrCByuJtzYNq57no264wEuuM5G/YmBOAhPbwxr1gCjx2IyyFC12kzTKUVNt+E6G7VH/VQfmLxMmq79O8i+4KqENvsKpSD9eIvADMUzqRCNyTS1RDlniY7G5iglRWq++3Ur9/+xD51O2eHPma3hxY0BbrlJcZyIRKCkSM2yxanjFD55k4XO7hj3/7EPj3fibsbNTyV77G2/NrEw+7E7/xl/3Xuwmd6DSvqIvZ95FIDqXw4kJNz72ccYLzydtbjba4a87nU0DnnN52iiu/ZtBFGFRmfCaC8kPW82gqhizkVf4NhL9xKLJMcK5c+/gMLFlwMQ8vTQ23aSWNiPzmTDWjQPlUZPxYWf58TG3xAJJj+XUjSMqNZitCfXMu5HLBJClSLuJPMj5yNLMrHeydv89GPKCYGdj9Sw7IYZ5M5JjwdxRoMScy7IJy3HQNYsCxq9Co1ehc+RuGMPekbesUX7ht8Z+XpChL3JdHz1p5Bj0aRIUPOMCjTpNiLuZMNl2sWr8e06mKDu8byynbQrzkcOhUEl0vvURnJu+1z8euhkPbrZpTj/7znkcAQ5HEmmuW0fzj+/QNZXbkYOhfHvG3s2yQ1fnYujto8/f/otNnx9Hlf9cDH6NC2ZMy388ryBWgNpl6zBtHJR3Chs+88P4d99mL5X3hqK9KgRCkpEIjKRsExeiY7SCgM1h/28/UYfH/1KDh5XlCs+kUntsQBZ+RosGcp3/8Y/nAT9kxs7kao2RX8SuPGmevDVn53zX0Eqfvn1g4pK8dU3FIH4138MPOzf/F5i30f+4sEfUPje65O44dMDgU/9aiGAb3wvtV3inULZNy7Hva8e59YT5FyzDH9dF56jzdjXzwNZxrntBIW3rCPQ0E3MFyLs8KBONyJHY/QdbEDUqsm/+Txa/jRyLQRPVz1tR14bsV8qBD0Ouk4lllbVWzKZfcFn0VsyyZ27jtZDiW7FhvQcChZdGn9/6LmfMNjNTa01MPO8j5OeX0HxsmuofesvSfcNuLswWnNRqYcOLvR2N5Cen5wfrd8WoMkZ/qQyHkw5IbDq07PJmmHh1OZ2ard3ccE35rHl/hNsWDWP1+45QmGVjVlrc2nY4yAtz4i9zIJKK7L6M7PZ/nDqh24w5CHc/foRC8fImp1O9WuJ+WWkUBBvbTWW2We5TAoCthXn0/nqswCEm9px/P5JANpuvw+A5i8mlqILHDlFcVoV4ViATMGK/J1nMKuMBKN9BMLdGLb2Ee3rJd9cifC7XWSSQdvvnyTfXBmnGTxaQ8fRFDuhmDSiZxBAQVUGT35lF71tfl7/5VG++tolHPtXC3//xu4EwWpas4SOH9yPHFW+N8+r28n9n1vHJAQyV5Thb3Ghz7ZgyE/H29CDxqLnWAccawd9jh13tImH7utDlmUMOTk8u03ppzIYce51YFtchCE/j52Hekg/ZxZ2s5bWFyc3aEYKh+KVyPohiCLyOE8C0hABY4P5ZTzoFwBTCZoME/76bowzc3BuPUHXC/uwVJWg0iunOnNlAT2bjyGFomiz0wg0KXn20xaX0v2yYuSXwlFi3vcm+jnocVC/80kqL74VW0lVkhAoqLo4rq5x1O3l7LQ10XCA01sfY+kNP8ZetoT241sSXJxBcYf2uVoxZ5YMOY9Ab3tKIWC7RimGpCvNof1X4+edVJhyQmDHoIW8rzPA6a2Keue1exSf9pZDzqS+r/xk9K6L5pnJ+Tdi/sRcRSFPJGX6zpanH2HWl25P8CQBsC0/TwkwGkPgXVPfoSGvecIOBATavIkeOGe/nwjMmXoWXVvCvEsHjqZBT4SVtyglEV//pbLA+ncfIfd/voz/zEnAuGIB/j3J8QXDwVKRja+xB0tFNoH2PqKeEO5jig647BMrMOSm0bOngUCHshvOXjsr3k8QBYo/vBhBLcbb9PPzaXxy4rnpz0btAz9m1pfvSIg4L/vsf9H+0pPjphnpdabkF31OPo1/fmBSU4+8l8i7/lyaHtqEubIA23lzsFSVIKhEIq6BZ0tl0IIo0Pb4dmbe9iE6nt5NuLuPnGuX0/zwZjRpBkwV+cPc5Z2Fp1MJEDWk56DWmeKuzOkFc7CVKGpbb3cDddtTJ3EbrEIqX/ufHHruxwnXtcZ06ne9yqzzPp401lo4F5+zBX9vanW28/kdKdsnA1NOCLzTsFQm6+AD7QMxAb3NPvra/Knz08kSPbveIPfSDyddyl53eYJv+UQhvyMJpAdQv7sbW4l5yPf9cL+4meDJWvTzy0EG56PPxWMaRgspFCV73WxARptuIJyuT7h26rdvUnD1Qrq3nY6fQvr79R5to/Rjy3EdbIm3aa0Giv5jEc3PTF5RH1ACvHoP7kqIfNZl5mAeJn35SBiKX4zFMyedZ95LND20CQDvCWX363zrjJeNLBNo6KbnDWVT0fqYotao/YkSlR1ociCFFJVnKBDm9F3/eDennRqyTCwycCIxWgcSBHq6hjf2hwN9aA1p6Cw2VBpdgmAQVRp83Y1nXquRBnnKme3F+LobEVWpDb/9JwGYfIHwgRICxpJZKU8CvkE1B9oOD69H7T2wK+VDbV91AVG/D+fuLROe57uBv3w2ddnOs5F2xfl4Xt9J6PSZhV8UMZ+3FO+20e/Eh9u1919r/NuA0bHxb4n9D343MTim98jkGKZToWfnZqxLViKIAwGLtnPXj5te74FdZCxdgy4rN+na+41nxoQUJ5xi7Rx6Yw68MRcl2rn0SU68YSd52go8kosCzSyOBd4ixrsTKXs2dGYlRYrf1ZagNtanDXjDBT3Dl4sMeXrQGtIAAX1aNr6egboKgigS8rmIBPow2grxdjfEr5kyi3HU70Ot0ScT5Z09CUw5F9F+qPSGlFG+44U2w07+1TcmtcvRKO6j+0dNR5akIY/wORdeTe6l1w2ZwO79CPOqJYoRux+ShOXCVUMPeJ8j0uei7yx+6C9WPx7IkkTHxn+MyDMfBKgFHTrBgIyMXjTRE23FqsoGQIWKiBxGYvKTJY4OAkVLlVxP3af3JFxRDVqYo4Hhi9v3q5CAeAqUwfcA8DqaMNsT07Kb7EVnhELqOB91hgXrpcuxX7sm5fWJYMquVpp0G2Wf+RaB1kZa/v4wUd/4XaPM5fPIu+KjKfO2uPZtJxYYW/1ex45NZK5OXaA8Y+lqTKXldG1+CU/12HTnACqjCVNpORF3L4HWhjGPn2zIsRS7MtWU3TuMGrM+upD2txqwzcuh5fXT2KvycBxQThiOHZtIX7Bs1IF3I8HfVDsiz/jqT42LX0DhGW1G1pTgl+EQkYNnaoUMCMQYikpEJagJy4FRq0HzF1xI/oLU32ewr4vDz/9sRBqCIKLWmzFnlZBbuRZL9gy8XfVJnkODvXliseE9EKXowIZJNcSu3tvdiGlQrIDekolaZyTkGVoLkX3LxYQ7nDj+OrLn1FgxZYVAPwwFJZR//YdJ7YHWBsJOB7GAHykcUjw7NFpErQ6N1YYuK1fJDz9EAIYUCdP05wfGXFcWoHvLyzjeeo3iGz+HsTi5UITWnk3hhwciG6VQkLDTQaTPhRQKImi0qPQGNFYbmnQbgpg8x45XnhnxoVbpDehyCtBmZKIyGFHpDagMRkS9EW2GfcgiOkU3fJaYz0ss6CfsciAFA8QCfmJBP7GAH19dddw3vvt/HyPvR19DDoSQozHUWRl0/e/o/Lsnq8YwQP2f7iPYPnllLQWViK+1j5xziyn70DxEjRgXAuGeLuofvpeyz3xr0u43Es8M5hdQeMbXUKP8DpKUwDOpTsij4ZehMFm/EQz/OzWHB6JxTwR3ISDiiLbiSBlDPTyGixMYvBtPBXvZEuxlS5LGnHztd/R1JJehjEUH7AMq9fCnQnHQ9cF2hcHorH6LZTf+hMY9zxANB8ieM/LuPtziwP3mIezXrqbn2dGpckeLKS8EhoKhoBRDQem4xkrhEC1PPzIuAdAPORqh6a8Pkn/VjaTNHT6jpajTo88rTMhdPxkwlsxKWjxGA02aNZ46w1Q2O+l6w6O/ItCqGLCiTjft//0bdDMKQaUiXNsUdxd9PyN9ph1TfhoC0L6jkTmfXJZwPdjZivf0CcyzKiftnv08M+f//XzEvqJOj6ViwaTdeypCnoDqZyJxAv3BYgA5FasxWHOV6N8hqsFFwwOLuVo/fBZYjW6g1Gg0lDqYsf+0YMosxt1WnaQaSgXHP7aR96Wr6PzTxhH7jhXv/3P9ONDw6K+HDOQZC+RolNZnH5+Qz/f7ApJE6HQToer6fwsBALD3rk342vqo/cdR/B0e9v8k+Zjt2D6+RWY4yNEona8+O+4o5GlMHP3BYl2ndlC/6+/0q6dKVyQ7fACE+rrjr/WW4e2UOkt//Q2ZoHv4CokmezGCIGK0FcYTKQ4F21XnEunsxXpRctH7iWLKCoFYKDBkTvbxQgoF6XztOULdk5unxPn2NqVK2Qg/5DTeXwi0NLwjdJ1vb6PuwZ9P88wUgLe7ge4aJZ+Yboi8QYN99y3ZZcPS0xiUKPOgp4dYdPgytebMIowZ+YgqNQHX8GuSoBKRJSnuTjuZmLLqoEivk5pf/QDzzAryLv8Iakv6OCnJ+Jvq6D20B8+JQ+/YDqzt+b/g2LoR6+KVpM1bjCZt7OHdMb8XT81xPCcOTspJZRpTFxG3M4Fn7Cs3jItOP8/07n/nXAj/3dG8/0Uyiuaj1psxZRbjcySqiT1ddfG8P6bMYnSmDEK+5DKfg+FqHjma3WQvjhuIh8t1BNDzjBKhb7tq5Yh0x4opKwQAkCW8p09Q8+sfoEmzYigoQWvPQZNuxVBQiqjTI6o1CBoNolqtGDdDQaRQkIjbRbCjld4DOybkWTQWhF09dL3xIl1vvIQuOw/bOeehzchEk56BqDMgarTIUgw5EkGKhIl6+4i4XXhrjhFobSTsGt4H+Wx4qo8MWRrwIk2yO+z+6BZ6ZGXHsV7zYSRivBkZUGWtVF+OQ24lEBtgSLuQS4mqkjTBRlQO0yN3UBM7SKFYzkzVAjZFlGjajleeoeOVZ5ghzqdVqiVEIIHGAvVqVKgIyYE4Db1gZKX68oR5pUKmkM9q9RpimuV0Sa3UxA4QQRHm81Tnki8quzP5mEznkaepk47ikwfSe4/mu1CjIUqYPtlJU+wU3bJirDxx9zexClksVyd6oljlAnaSGPVtEEysUV9Nj9zO/uiWIT/PYPTzjPvofoxFZejzCuM8ozanI4giUjSSwDP+plpCXe1JPKPWm6j62IATRdDdhaN6D51HNqNLszPvw99l/yB+Kb/kcwRc7UT8fRSuuIrB7on7HlaM4llzVpFbtYEjT/4oYd6D7xV0d+OqO0DHoU3xAKiln/5FAr2As51T//odVR/7IY7q3TS+9VR8Dp6O03QcUkpRmrJLmX3Z55GlGL7uZhq3PUnYN7mpk89GNBygad8LzFh9I2UrP8Kxl+5LiBOQomF6W45jK12EIIgUVF1C3Y6/JdEZSPwm01M3fHncaDiAxmDBVlIFKB5Dw8F2zSoQBKTg5G9ip6wQ0Fns6C2ZBNxdhH0uVIIW76njSLFD6Mw2pFiUSKAPjSENo00JNQ/7egn2daPWGpBiUXSWTEzWQnyxFqIpsvr1Y8n1Zez/e+pIwEtur6Ly4gK0RjXtx3p59aeH6KxWknRZsg2s/VIlM8/LQYrKnN7Wwca7D4IsE+pq4xP/E+S+dQ8S9ikPxqy1uXzkN8mS/MdV+zj/y3NZ/dnEjJOP37KVnnoPX3/zCkDJ3b7j4VPsePgU0dDIuvkd0ZcSFsOz4ZGHfrgsQgYr1JfQKTWxP5qsL2+QjhMmiEEwE5CV73aWqooCcSZ10tEkGlsi44sEXaG+BBVqNkWURSNdsLNOcx1HYztplxoA8MpudkaVpHdpgo1V6is4HttNqzRQJ3qk76JeOsbpmJIao1xVxSJxLXuir+KWe+iVu3ktoqQKWK/5MC1SDTWx5LQf81Tn0irVkieWkiuW0CENPNhlv/w8jXc8iuQPkfNpJRGZaX4pdd/4PQChrjYsM+cScfTgr6/FfWx8NbYBTjz/v/gdiofO/OtvB2R6G48Omaq48+ibdB59k+x5a8msWMHxZ+4Z8710FjuLPvFjGrc/Tc+pPex7+NtJ9NR6xWgaDXopWH4lrW8n5tSvuOJWpFiEA4/dNo5PPTE46vbi7Wli4dX/j2U3/JgjL/6C4CBbwOltj5PvaqNw8eVkzlyOObsMd9tJYuFAQhbRYF83xzf+ZkQPpc6T2yhYeDFpubOIhnxn8hENDdeLu9BkZ2CqmjEpn3cwpqxNwF62BFmKUbj4MgDy5q3HWqQkb8soWUjRsqsQVRrS8spRa41Egz4yZy3HXrYEc1Yp+rQsYpGgsvOWxl+/tPLiAv5110H+75atuNv93PSQ4s5lztLzySfWkVWexot37Gfjjw7SebI37gKt0og4m72Unz8Qct6wu5v7L3uFtx46ibPRy/2XvcL9lw0kqmo74oq33X/ZK7QdGzhy/u2LO/jDh9+g6kMlfPT+lfFaBRNBp9RElliQ8lqRWI6MzClp6Ape7VI9ZaLym2jRUSzOpi42cAweDY3hoMNAmmCLL/YAbrkHn9xHjpDao8Iju5RgJGH8tXxrY0eJEqZQnDWmcVYhC4fcRq/cTbZwtieYjORXdMSdD2+k8+GNyGcFkDl2vo5j1+tKcNokxChYi+eh1ptwN09ezqmhEPL00NdyEmtx6prUg+E4tQf7rKWotAN+9CqtHnNuGY7q5Hof7xb6DbmCSk3ZuddzduBW29FNtBx4GVmKobdkklOxhvwFF2GfsTQeE3Dy9QdHFACQuPP3Okb2UrR9aDWWVXOJuibXTgpT+CQAypEpFgmi0Vvwu9ow2gpwNij5YmLhQPzIZs4uRWvOQIpG0JqsBM4YZEIeB7FwgFh4fJkJzZl6Xr/nCNWbFP/xF76/jy++eDEA67+qMPtfPrONSCB5V162MptjL7dQeVEBx15WdmXRUAx3m5+gO0IsKuFuS3Qh67+egDNBhwF3mJ56D49/ahtfeP5CFlxdzOHnhj9CjgyZEnEO3VKyn3aGkE2v3E1IDqQY1z9aJl8so146RpFYTlgO0iKdHhON4WASFCObR07Uv3rlXtKE1MU79IIJAYHwOO8JIBGjV3ZgFcZWPEdGxil1osfELNVCxJgYj4CVAmF0pTmEGjoB0OZmJEURZ626GFmWFPXlBBLLVV7zdQDCPje1mx4l2NuJLu2dr20c7OshLX9kwSlFQrjqD5FVORB5rjVZAYFQXw9Zc1ZRvFqJom7bt5H2g5PvpTUUQt4edGY7lpyZZJevoKsmsVZI29FNOJsOK5XFjFZUGh2RoBe/s5WehgOER7AV9MPnaETZMQojqoIAhR8EAVVG6tifiWBKCwGDNZeOY1vIKFmA1mjFYM2NB2NEAp64W1V3zW78zlYKFl+Gq/EweQsvpPP41gnfP39BBjVvDngGyJJM49vdCKLA7Avy2fHH6pQCAJQTxN6/1rHmcxVoTeq4Smii6G3xUbu9i9nr8kYUAqvUVyS871dp9ENAJF3IJE2w0Scn5qzXCQZc0vAubgC9cjdzVEuxCTkci+1K8P0eLY2hoBbO/NYkellECKMRknOyq1AxT3UuUSJ0SokBSyN9F2cjJAewimMTAr1yF1EidMutVLAEm5CLQ1Y2EJ1/2kjRd28gUNsG0RiGymLafvNcwvjuHUrBFfOMxNiEkoI1NLa+RWHeCnz+bjLSSqhr3kxZ4TrqW7YkzaPmlYcI9LSRXlTJzAs/Sd2mRwl5kutdTDYEURzR1bEfnUffpOLKLxN0dfaPPvNfxlm7D3fLSWZeeEvCGFfzUfY8rtgqyrJXoRK1FNuX0ezcTwhWKRwAACAASURBVJFtCW29R6jIuxBfyIE32I1ek4ZK1FDfvZNsVRH7n/gekhRBklM/s7Zr1+Ja1Uvfm1vofXEHed++AeOr3fgP12KsmkX6hUtp/+WTFPz6M/R1ugAf7fc+hRQKU3b/NzA2qpD3WXD+403yvn0D7lffxn+4lrA9THP2Htp/+SS5X/0w+ooiAica2fPbbwMw89HbKO5UAgjb730K/aJFNH7rt/F5Ff/iVpq+rRTv+cAZhntbjhMLB9Bbsmja+zzmrFKsBcoDIksx9OlK3pGs8hVEzuT0CLg7hy3TNhaY7Lp4EfZ+eLuDGDO06ExqHLWpdcwqjUj5ujxeuGMfIV+U8rW5HPtXS8q+g1G8LJPbD10bf//jqtTxB64mL6XnjLxAHY/tISgPX32rQ2qkRKzkSOzsKEQBaRSJvGpiBzlHfTF9spMO6exj7ehojIzhVSNmIT1u/O2TneyLvkGYxNPfaL6Ls+85lkyuKtQ4JGXBD8hefHIf2WIhjpjSFqzroO5rD2CcVwKiSPvvX0QKJBr5RK0OKRxCZ8vGW38y6TQgAHnZiwgE+hf01POLBv1EAh4cp/aQVlBBVuVqmncm85KgVo9YX2Ms0KdnE+obXSGbsNeFp70WtdagvPcr9imNyYq/p5VYJDTs3AREYlIYtUqH3VyGWqUjJ60Cf8hJJBpApx5QBxq0VgQE7OYyvMEufKHkOepnF2FeNZ/m2x6k8K7PEDhWj2f7EUyLy/EfrsW0pBzPdkXVKUdjNP2/38fHqqxmIp0umm9/iNLffJ2+LQeHHNvx66fJ+P/snXd4W+X5/j/naEuWZHnvEduJsxdJyJ4QNqFQ2gKFlra0he717a+LFtpCd2mhAwoUShmFUlYJO2SHhOw4wzveQ5YsW3ud3x+KJSuSLcsjmMJ9Xbosveec9xzJ57zP+z7P/dzPFcuxvhB53s7uL+j2IKqUBD3eEDXU4/1gBobbjkSWgJ6pemTVBuQzSrBs34Zp3Xqcp06hX7sCv9VC897NSD4fBIOYNlxA3Rv/CB87Ev/cUHD0eFDp5HgGzeL1mWqcVi8+d4DUAl3c4y7+4XzUegXfOxQa0C/9yQJqtnbgdQ6/Gmh618xjn9me8Loyyw30nE7MeOqVuocNhgJUBfawQL6WabIFYR0XgO5gCzliCdWBg8OKetmkHvz4sEixOugj7WPI6w92gwzShCxsUoQFYxIysQY7w58HB4aH7GsEv8UA5CjIEYtpGxRYToTpskW0BxtJF0IxoKbgKabLFnE8EBIjy7w+QgEVBIHsmzci06mpvikShA16PRimzSXo80QZgNOtIXpgc3vEXy4g0NASXRc5fP1qLQqNHmPhdFJL5tC47Qm8jl4sdQcwFEzD5+wja8YKtGl51L/xyJlrEkNMO0FElCujNHAEUUQ5qHauz9UXda6sGSvIW3AR9q5G6rf8I2F/A2jc+jhzb7gTe1cDAY+L2tf+RvkFn+HEC79HlCniCLBFUN+1AwGBmo4QaaHTNnTcQ0CgoXv3kNsB9MtnY3v1HSR/ANtrezGsmUf3w5tJWTwDRU4aMoMO+55QBT9BLqPoF19ACgRp/t79QKjiV+HPb6H9t0/h77Fh320LHZttijo27vWd1Z/jUC2aWaUY1szH+uJOXMcbUU/JxdthwfLc+EpGwCQ2AoPhM5vRzZyFoFCQdc1Hsbz+OqY1a/G0tyGq1GjLK/B0duDr6hpqcjQqtB61Ur46N+zTF0SB4sWZSEGJhl1dLPhoKe8+UR9ViUuUi0xdm8sbvw7FEmRykc/8ax3lK3M4/mri1UAiZE8zUrIkk+f/3+jZI2fjdOAEc+UrcUqRoFNbsJ4csZgpsllh1kyyGGsfXtz0SRZyxVIagseBEPtHJxjDnycC02QLEBFpCQ5dw3YwBAQyxDyOBQYNNBKUySKyD93/DFEgBYWMkp/fTO9r+7G+si+qH5k2BVGlCfUoyoadCQ+3SqnYeAsAnj4zLe88j6UupIratOtZZl79HUSFEldPGzWvhIKY2bNWR1FE5990V5giCqDQGpn9se+HP5988Q94+szhc7ksbbQffoOuqm1h47Xg5l9G9TdAET0bgwd6W/MJ6rc8SuXlXyHgdeOytGHvCBlitVbE7Qxy1ecyeO0pK153kMtuSkepEvF6guG2z/4gl2AQbD1+nvxjF9feloUogtMepKfTh8seRKkS2PN69IQg0O9Epg9N6mR6LQFbaPLYv+sougVTwzN5iJ25A+GVgG5RJZ6G9six86OPjYez+/N19KAqzSVgs6OpLMLXaaV38x70iytJv2oFPf8Ze2nXwXhfGAHLa6+QumYdks+H+YXnMZy/FCkQQPL7QQWiLgWZVod2+Qo8raMbaI150bMOu9mNw+xmw7dn43P76etwseST5Sg0IZ35rfce56bHVnPDQyvZ/WA1XpcfpVaOFJRQaGQcef407r6QK6lmWzuVF+YnNAJylSzqOuzmiEtDY1SSXZnK9Q+soG5nJydeSyy6lSpkoiayWumTLDH+dYAeqQOXZEcvmMLc+R6pg9ZgHaXiTHQY6ZKaUaBEjjJMAU2EwX04pD78+NGgjenj7CBvn9QTzgOoDRxmvnwNWWIhSlRMEWedcT0lFxRP9Fuo0VEglpMrlpIqZHAi8C52KUQFFhBRC1oUKBEQUKFFiTrscjIJ2SiIFRYbHHAXlHJMG8/DuGo2jd9/GMkbuypMnbkQy8Gd6IoqRuWm8bsdUYP32Qh4XRx54icx7QMU0XjoPrmL7pPxE9GGO9f+B781omPO/mxtOIK14Tsxxw3UlBYQmLc8hdPVbpQqkS3P9bLiYmO4rf64G0EAQ1poaJMk6O8NIJML7Nps46u/KuD334p9Dp1H6sj63OVYX9hJypIZdP0tRF91Hqol+9ZN2F7bF3NMPGRcfwHOAzVIgQDOQ7Vkff4KbG8kN2HzdVgwXbkSy9NbSLtmDeZ/vIph2RkWXl56gqOTx/vCCADILT7MR7ZjmnYersPHMUyZTbC1G7kxSN+p/ZimLUThViNKWsgqRJtTcmb/hVjPbAcBV1czhimzsdUewmOLuBhu27wx6nyPfHIrrUcsnHqjjUtuX4BKK6f1iIXHbwktx7rr+nj0U9tYfdsMrrz7PLwOP/ufqietKIWG3V1hAwBw/JUWNt29CIVGNmQgGUKB6MHXMZAnAPDxPy/D7wmw9b4T7HusNmr1MRRmyBZHfR4uKasxeJJZsvOj2o4H9tInWcgXy5guLsYruWiXGhOeN14f02WLEQgFXM/uo1w2J+rzu/43sUqhgHKP1MEh/zbmylcQwE9XsIWawKGkK68l+i1yxRLSyaE3aGZf4A16pQhH3CikRyWL5Yol6AVT2AWVJRZEJccNoFtqQy+k0i/1Uv7XrxGwu+jfVUXGRyKqkd1Pvh1+37MvNBDb6yee0vl+w5U3Z9BSFzLaBpMMg0mO1xNkxSVGkCJtHncQmUyg1+zn4uvS6Gn3odGLlExTI0lw+lR8pqC7uhn77mMU3nULfVsPhWfzks9PoM8RpZk14L4BwoHhcD+nmjFuXEzvy7tDx9qij8358tWoK4tQFmbTed+zcfvztfegKszEeaye7C9/BF+XFZlWiTw1JVxwfjwhnM1Vfi8gCELCi0irXETA50GuDqn9iXIFjvYGtNnF9FTtxjhlFlIwiFytQ6ZS47PbCPg8iHIFzo7TmCoX4bP3ho+11R2JMgJjgUwpI+AN/aMNpWnINXIsx0fPivkQ/3swrJgVt71vx8hWVR90CGLyMkuJjqlcl8PJt+LX9J1syLh2NYF+FwhgfTlS9EaSpLEnlEiS9J6/CHny37evDQ9fIwHS2r9skjRZOgkBaf2DV7/n1/Xha/K88r6yaURto3nJTSZJO61SQhDC77XTKqPeD9529n4jPU/Ghksl/Yy5UsaGSyVAMi1fKwGSceH5kn7m3Kg2QEpbtUFKX32hlLPp45IiNU3Kueq69/z/MPg188I8SRDe++sYySvtymVS2pXLpNyvXhXVPh7j7/vGHTSpIYFpehYeqwtXVyigNBJ3zYf44EA7o5j0Tcti2sYDqrx8pEAAQSZDlZeP88RxNFOnRb0f2BZvv5Ei4HLSf/wwclMairQMVNm5KEzpIAiIak3UvsZFy/D39SLT6ena/Bypi5bh6Rpf9d6xouq1EH23YkUWNTsm98p9oMawMjd+kuRY8KERGAe072liye3r2f2DULKPIBORqT78aT/EOcQgt+7gOtgxNbGH2G8ksO7cEvW349nHAeg7uDdchnRgm+3d3VF9W3a8lcy3QaXQY9IWkKLOQqNMxaQrQCYqkYkKREFBUPLhD3jx+PvxBdw4PD043GbsHjMWe+OIzqHUyvE6/WRMSaF2V/f7YuLmbR//pL/3xUi1tOIzGDS5iXc8C0EpgM/vwh/04PbZcHltuL02mi0H8PqTSRwaHlX376XmicN4+0OBK5lSxoFfxgZwZKKSDbNimQ/nCi2WQ1S1vJR4xyEw2v/DeKHP1c7umgeTPm7jnB9MwNWMHC2WQ1hPNdPzXDTLRlWSHXf/RL/zntqHsDnbxvUaAVZW3oZWGV8CfdvJe3F54wsOxq1DPYpYo4CAKaWIWQWXoRniOgYgE5TIRCUqRSgpLD0lovPv8vbS3V9Dd18tFvtpglL8/JwlnyhBkAm0HbdFGYD3+jmFsT+ryeB9YQRGC1GQoVKkoCIFnSpCrSrPWYPTa8XcX0en7SRWx+kYMa9kkJJvwN4a4R37XT481tFr13yI/z20/e7Z2Lbfj64i3ZSsFRxs/Ff4s6BUosrPx1VXi6BUops5C1V+Pt7u7vD7gW3x9nOeOjnq7zUeUMg0FGcsIj9tPmrF2LVxNMpUitIXUZS+iEDQR3dfDYebYn9/vzcUNZ55YS61k9wdNJH4nzYCw0GrNFGUfh5F6aHaspIUpK33KDUdW/D4kqs/sOTOC3jz5n+z/qGrefPmf0e1fYgPAaCdWUzul66kb+sRBLkMw8pZtP76GVw1yRdZzzJMZU7RVRxpChkR+8ED4W0D7x1VEdbRwPtE+51rZBunM6/46gk9h0xUkJM6g5zUGbi8Vraf+nNY30ilk+O0eek4MbJM8v9VfGCNwNkQBJF801yyjdOp79xOo/mdEYthfYgPkQiZ162j+Sf/wNsRUpm0bT9K9mcuoulHj46qvxzjDGqVW3F6R+cjnpK3BpCobxt/3nkiyEQFswouJyd1xjk9b13XzqhnesdDtaTma9GaYhP9PkiYNPUEisrXo9YkX5JxvCEXlUzNXc/isptQK0ZW0lKXZ+CyF28K/x14/yE+xAAEpTxsAAA8p7sQNbFKqCPuTxAozVqWeMe4x4p0WI7i87sQEojzjTc0ShNLyj99zg2Ay2ulzRotXSJXyciq0JNdPv7yzO8nTJqVQHPdFipmXU310aff60sBIFWbz7Kpn+Wtqt8k3PeFix4+B1f0Id7PUGQYybnlkpi2sSDfNIe6zm24fcm5M0pyQhnLDncXyWZejwV6dRbnTbkBpXxoYbihYHGcxu3tIxD0Egj6kIlKFDI1ek02WlVaQmN29ioAYOHVRYkEaj8QmDRGIL9kBW5X8ktbh6eHU+1vxLSLgogoKNCqTKgVRrQqE0ZNLjJx5Es/hUxDtrGSTtvEB856Hc1Ync2JdxwDJoJRMgCX10aHbWilxPGA2zv+VZXO1e/uerAxpt15PHFFqeEgCCKlWUs50fpq4p0HIRAMSZpkpE6jy3rugsLJGICgFKDLdoru/hp6+hvw+IeO08lEBXpNDkZNLlmGqaSllMTsc/YqAGDn3+tY84WpSROZ3u/P6tmYNEag7fSuUbmD/AE33X0jV3tMUWcyq/DyEVMd5xZdzdHm52nvHTqAtugH69j307fOalvLvp9uGdE5AHrsDdR2jr0QznsFp9dCdXtyXPDJgHP1uytrTVHuIDhTXWyMKEibT13nDrz+kUumu729qBR66lvPXTxArTCM2ADUdGyhuecAvsDIGHaBoI9eRzO9jmZOm/eSb5pLXtoc0nSRZLx48T1RJnB0cytlSzMRRGHEeQI99gZatW0o0zMR1Wps7+5B8vswLl5G765tmFatx7ZnB0Gvh7S1F0IwiNyQSt/BvejnnYe/10rvnu0hAcxJgEljBPKKlwECzobxvzFFuUjQH0RCwiVao7jmBk0O0/MvIlV7dk3YEARBYE7RJirzLmRP7cO4vLHl4zLm5TL1urlnteWN63co/dblpK2czv4rfxluy7xkPrnXLuXIp/4Us3/RrRtJW1mJqFHirG6n6S+v4zX3Me/Jr2F+9TCN94TEz6be+TH6jjbR8a+QDHLK9Hym/vwTSP4Ajup2Gn//Mt7uycOeyL3jS+H3ypJ8fM0dUTz19h/dG++wcUFR6RraW/fh8zoom3YpbS3v4HKMTH8q/1sfpeFb9ydsSxaiIGdl5W28eeyXiXc+gy5rSKBOozo3MbhZhZeTb5o77D6+gJujzc+PeEI3HFqth2m1Hg5/HqrIlC5NxZTzM8Pqv8kg6HKiyMgiYO9DP3s+3jPZ0JriUjztrRjOOx+fuYtAXx9SwI+v14p+zgI8rc3IdCmo8wtxnW6I2/ct9y/g/lsOJGwbL0waIyAIInK5OvGOo0BqRTo5i/M5/sghpn1sFlUPRwqf97k62Fv7CBfO+f4wPYBSrmVu0Sbeqft7TE5Bz9EOqh8/HNWWWj5+kq+CXEbqkgrcbSOrXwqQtrKS0/e+gqfTRvamRUz9+Sc4dstfQZIwnleGIi0FnyV6ia2rzGfa3ddz/Gt/R1QpSF1cjs+aHF02GWTeeAOW514gZcF87O/uJ2BPfK7Bg3zxo3fR9btH8ZtH/ruMFxprX2fKtEtoqHkNv2/8Eg+HQ7+rE70mNsFMnoSLE6A4ZzkAem02x+pj+fPjiUxDeUID4Pb1sb/hcezu8RF0PBtDsfw2fmsGlmYHb917Kuk+PR1teF55Pqpt8KDurD0VkzDXf3h/0uc5F5g0RqC9+R1S0xMXqR4N9IVGNBk6TBXpqNNil6QSEodO/5u5RVcNW5rSqM2nJOP8mCpFe3/yZsy+e+8YP9eIYUEpfrsby9sj87kr0lJovv8NrDtDN3fDb15i9oMhqVoEAfMbR8jetIiWh6LdVYU3r6X/aBOuhlDijONk8hz2ZODvNqObPYu+nTtJWbiQoNuN49DhxAe+B1BrTOiNhfj9btqa95BTsAgAKTiyJb0i20TFw9Ea+4JcltQ1NHTvZlrehqjSiQOQiUoCwZGVHjzdEZJD16qS06FRl+WH37vrEt8bMlHJjPyLh93H4+tnb90juLy2pK5lPPDqb44zfV0OK24uZ8dDtePb+RiST4vnGvnyY4ui2nIqYv/n44VJYwRyC5cgl6sxdxwd974FEXqqOjGWmeip6oy7T6ftBIebJOYWXz0s06A8Z3WMEZh2/TxO/fPQoPMJFF80lcaXk59hxEPaykr69tfTd6ABmUZJwDX8w66bmkvv3kE3tSTRfyRShMX8+hEqf3kD7U9FZAxkOhUpMwupu3t0WayjgXXzKxjXr0NTUQGigKgJiZAtuDgLjV5G83E7OqOCEzsnvkh6IrhdVqoORcqWtrfsJRjwDXNENKo/+YsxX4Moymns3sO03A0x24rSFyYsoXg2nJ7kfld5ppGUJTNAFOn43b8S7l+WvTIhzXp/wxPviQEAyJ+Vyt4nG9+Tcw+HO9ae29jgpDECzfVvT1jfja9EBkS5Zuiv3Gk7SW3HVipy1gy5jyjEHl980dQoIyAFJcqvmT0uRkCQy0g9v4KG3/4XR207aatnYHl7+NKKCpOOgCO6gpjPEgkcBp1eLNtPkHnpgnCbMsMAAnjae8m8ZD7FX7oIgNZ/bKP9ifGvazoA25tnyi7KZGHffkaBmt3PdrD06hzMTS6mr0jjxI7QgKUsjY7dKApzEPWRimHehrGX8BwJkjEAAOlXLce6eS9B95njRAHjmrnY3jo0/IGDoJCpaO45ENcIlGSez2nzviF1cgZjwB0EkVXBSKAsyMLyzFa8rd2J95Vrw9n4w0F+6WyyCrLouucJtAsqyfjcVQgKOZ7aEPvGfbyBgNOFbuF0/L39WB75L0GPl8zbrkUzq4yuPzyJ+3g9qtJ8TJ/YCMEgnb/7J5LHR+Efv4P5gf/gOlJD/l1fovX/RceL/J4AV/1sPl01fez8e92If4eJxid+Pou/f+3crYgnjRGYSGTOzQm/L7m4gn13D13Mvb5rBx29x1k+7fOIQvzl+syCy6LEnewt0TOZ7MWF+ByxZRxHg+IvX4RMp6b8h6H0+qDXT+87tQSHWQ34rA5kWhUBZ+QaFOmDlpMCNP/1DUq/dTlSIOQv9faE6JfKdD3dLx+k++WDTP/dTePyHUaCwcFdrVHOvAszkIJw4JVuNtxcGDYCg/3/zbf99Jxd31hhWDGLnv8MGnCDEumXn5+UEVArjASCXvxBb0wcQCnXsbLyi2w7eV/CTPeB7SnarJF/AcDb1Ik8MxVflxXJN7yxWVX5JWSiYsjtvoCb7SfvI6ViGYIoIqpVpCyfh6e2GVGvpePuv4f31W9YTMcvHgFBoOC336Dl67+h+96nyPnup3Afr0e7oBLNnAo6fv5Q+JjUq9dhfvA5TNesx3UkfrC5dmc3tTsTG7REyJ6eii4tlPhXv7OT9FI9tjYnfk+AjDIDTquHgCeIxzGyiUPZIhO33L8gpv1/PjBcVLYOgKa68acZqoyRgHP7rsT8XqfXwmnzXkozl8bdnps6k1Ntr+E/44M99LudrPnzJhytNjRZKehy9ez8v1fGfN2CXMS0dCrND7xJ767QqmLmnz9H6qIyLNuGLkHoONWGcXF5OIYgiAL6ObHa9R1P7ybvhlUABOxunLUdpK2eTu87Y2dojAXP/bo+6vMbD0X+Z6lXX4D3dBv2LXvPPgzNvEpch95bMbSh4OvuxbBiVriSmG5eWahSVBKQy0IDTXPPu5RmxmYLqxVG8kxzaLUMb1hGSxEN2F2IKgWZn7qIrgeGV7hMlI9T17k1TAH1tnSiLA5N1KRAEGVBNjnf/RQA9m2DBj5JAklCkInhyQuALM2Avyd6IqaZVY7txe14z+tAWRyfDr78U2Xh92NZCXgdfuZcWUL1lhC3f/GnptK4q5MTr7Ywe1MJLQfN9He66KgaGYGhuapvwgb8eJg0RiA8+AvCmIIq8WCt6cFldmCamoGre2R86tPmdyjOWBx3NRASpZpJiyXEMnJ22Tl632602Sm4zE4sxzsJ+sauO2SYV4qoVmB+/QgBe6g2au/eWkwrp0eMgExElR3xu3otdnxWB0W3bCDo8eHt7iPnI4uRqWNnZa7TZvRzinDUhOhtrY9tp+L2a+h4di+iSo5cr4k55r3GcAO95B796su4aBm2fbswLV+LbX+I9206fxUIAlIwiHX3VtJXbiDo92HduQW53kDmxivofvUF9HMWYt29Ff302QQ9HgS5AvvJ6NhW5982U/j96zBdsgjJH0CZlUrzz59M6hrlYsgINHa/Q1H6YmRi7OM7JXMZbdbDw6ripmiy8fmdZKZOo7nrnRGf33W8EQDNzNKYgTgZeP0Omnsig5ynvhV1ZSkBmx1ZmgFvS2fMSgAAUQSBmPMGbHYUORnhzzKTAXm6kexvXI+gVqFdUBn3OsbLBWRtstPf5aLrlA1duoruahtZlamceLUFv9uPKCaXlnzktfhxy4nCpDECxeUbkKTghKwEpt8wByko0Xe6l/SrZ7D3zu1oFKkoZRqsrvg+ZI/PTkdvFXmmOXG35w4yAgVrpwChWIA6TUPeihIAWrbUxz12pDCtrKTvQEPYAABYth5nyv9diXhmUFem65n98K3h7Se+8SiOk61Yd56k5KuXINMosZ9s5dT3noh7jsEDvW1vLXV3Pcf0395IwOnFWd+J/djEZkYmC5khBX9nT9xtAdvY6KzqgtBqSTdlKp6udkS1Bp/FjFxvJOeKa+l5+zVSZobojinTZ+O1mEmpnIUoV5BzxbV0PP8UOZs+Qcd/Ho/p22fuo/6bf0VTkY8gE3FVt0YVIB8J5LLQ7Nrrd9BqOUhRxqKYfbSqNHKMM2jvHZpJFpQCyGUqfIH4RdeHQubNl4Ag4DxYM6wBSCQHHYpdRL67r8NM6lVr6Xt5B9rF8WsxAxg2no/z3dgVsLuqnrSPXYjtxW0EbHa0CyvpfX4r/W/uRVAqyPl/nx72ekwFWqwt40Pznbo+H322howyAwq1DEEQmLo+n32PjXx1verGIlbdWASAFARzs5PN99TRUTsxdO1JYwRO18ZKP4wX6p47Sc6SAmqeOY78RiUyQY5emYFiGCMA0GY9NqQRSNUVIhMVBII+jBVnZiFnlqoFa6agMKjGbAS+kL6Tl19x0akX2XihmmAQXnixhmmP34e7BD6+qJ6fbrqbj1ypoa8/SFt7kE+vVVKVraLq6TeYWbcViyXIqb0ht9Xa1SpW7/oTTQo3c9erKS2R87fL7kKhEPjR9ww8/ayLEztOsn/H5HSpAATtTuQZJnztsb5ceXZ63PaRwt1yGk3xFESdDplWB4KATKsj6PeFSyQGPW5MS1cjyGT0vPUKaSvWhbcjSUOWUFTmhDKGXadaYtpGCpkYEZxr6N5NYfrCuJTm0qzlYSNw8a0lbP5TIxu/UIwoCrjtAbY8GoqJFWcvRRDEEavldj/08oj2S9eXDblNQop1V0kgeX24a5rRLp4V5Q4aCAznfPdT+Dp6sDzxCggCmbd+FGVJHuoZpbiPN9DzyEtkff06JI8PKRCg56EXQl17fUheH/L8zHCfrmN12F7aHnYHZU818Oz3DjIeMBWl8Navj5A/N52yVSE3lCBLbiXwyysiLC9BgLxKPR/5QSV/+tS743KNZ2PSGAG9XqR8SuRyDh4eGed5JLDW9GCtCc0eTzwaugE77ImZOz32oQdxUZBRBLN3egAAIABJREFUnr2GU+2vc/KRA6z505U0vVZD/XPHOfaXkS+xh0N7R4Cq4z76+kMP6alqHz5/aJlfVianzxbE65U4cMjLN7+q588POCjIl3Pvn+2sXxubeLdlqweZTGD2TAUrV6j42d19zJmt5NBhL7Y+ia6u5Gam7wXab7+X3B/fBkDP30MDrzw7Hf26JchNRppuuX1U/dr2heiyKYe6UIk6nAEljo696OQmNDIDacrZuA+0YfN2kakuocF+gDztNNp2vEWedhqBoIE+3OHyimdjPDKGB+cHuH197Dj1F1ZM+yKCED3I6NVZnF9+c6gCWZeHFR/Px9ruQZ0ip3B6CqV5q0AK9ZGMXLpp00oA1BUFtP8q/soSYFru+iG3nWh9JUoHyPrvUI5N+x0PAND1+9hVFED/G9ExoO77oimqrqO1uI7G5/p33BVf4FGuknH4xRaEJN01AzBuXIw8NQW/1U51nxbDdTM4VB8iMLQe7iH9ug20vNuO/d53MF2xHKp2oqksRlWWhyCT4euy4m3uRLdwGtYXIqSBBZflhP+nokygcKYBW1dyq7ZkMGmMgFoFebkyNl2mQZTBZ744ftxw4xQTbksoCFW4bgqBLZGHqcEaG2AcKQxnsjcvfuZ66p8/jkKnZNoN88Lbjz84vpb7k9fpuPOuUADs5CkfmRki8+aGBnHxzGzjzS1ubv++kbt+1ceGdSo+do2W5UtV/PkBO9/+uoGUFIHv326jsyvAT39s5KFHHBQVylgwT0Ffn4aHHx25Bs3ZyJ21jq6TO8mZsZrWI6+RN3sDSq2R7rp9GLLLMdftI6N8Ee3H3iJ3xhpEuRJnbzsqnYmOE9ti2kSZgvaqLVEDVcDaR/uP7yP1oxvJ+vqNQGi25zpaQ/cf/jmGXzcCq7cdndxEhqoYV6Av9PL3k6JII11diDfoQis3opNHZBf6fBNfmepsto3Ta6HDdpzc1Jkx+xq1IdmSXc+0x9HFCa30CrIWISCMWEnU+lxoBaHITA23ZZSmYG6IDOoapRGFbOhYksUeXyrhvcD2B2q44idz2fyL0RXWETUqep56C9OmlUheH90Pv4x6WhGply3D19pN0O7CvqcKRU4aquIcFNkmXKeaMF21EldVIzKDFpleh8ygI/Xi8+ndvAcAfYaKAbsU8Euc3GHmxPb4LtDxwKQxAr29Ega9wK/u6ae6JjkOdiKUXFSB1x5aWaTPyGTHs6+PS78GTYjRcPieieHR33NvRDXz6X87efrfIb/lE/8K/a2pjdD0PjfIaG7Z6sbvh5dfcfPyK5EZxM9+YWNAs+pYlY//+34vwTPj602fHbvRFQSRgN8TGbQlCaellcyyRfi9Lgx5U/G7IwOG3+NAoYmuu3B2myoljfTSBbQeeS3cFrD20XP/0/Q+tRkQCPQ7CH+RMaLZEXKj9HiaYwZIq7ctqq2mL/TQtjkTryrHI2M4HuWyvmtHXCMwGGfr4kzJW4NEEK/PMSopaV93pNbw8k+X8fyPIpx2vTp+3WQIZQc7kkxQm0gsvXEK1hYn511TPKog8YBRHPgL4DxUg/NwLUgSjoOhOICvw0LHHyNVBtvueiyqH9fJ01GfS+elfjDzBMrK5MyYrqBsihzQ8NNfjJ9o2bG/7SfgDbk6dLl6VPIUsnUVyEUl9dbhXTeSFBxSSkIuU6NWGLGe6IqqMQyhusPvFYYSJzy7fZzGzTAcPS3kTF+Fz9VP1tRleJ02JCSCwQCCICKTq5ApVKj1GWhMeTjMTdhaqsibc2Hctt6WKgx502IGKkEuQ5GXhbe5I4pJJjMZCFjH776JN0COVn9/vDKGz4bd3U1XXzVZhqkx21J1hfQ6YgP79W1vA5BhrEjq/DJ9RHIl0O8kJV1FZ3W0vHc8baMB2Fzx4yUAF5x/x7Dnfn3PjwCYN+06Mk2V7Dz0e5zuiEHRqtNYPu9rdFtPcuhUyKW0cv43UKtS4/Z3tOZpZEo3UlDCYRmfnJ4wxshu1KYqSM2Odef2dk6MS2jSGIGTp3z88A4bGo3AxvXjKyQ3YACUBhWeXjczMy7C6bNS07Mj4bFOrzWqSP3Z0CgNLLhzMW/e/G/WPfAR3vpcSJDrg1hj2NZ2Elv7GeGsQVTfnvpY4az6nRHfb8Pup4ZsO5syrMjNJOtbn0aeacLb1E7XLx8i0O9Av24JqddeRPPnfzwB32x8oMgwEHB6CDo9CDIR08WLsLw08viRgBA3kFvftSOuESjLWsH+hljf/YDOkE6dQY+tdsSGzbB+Yfi99bntTN+QiyFbjUItw+cOPWNa5dDKpHb30EH71q4IZTQ3Yw4g0W4eu4RMUArQ3h07q3Z6LGy7P6R/tOja4qSkpCcauRUpXHtnbOW1//lksYpyOV/5oh5rb5Af3Tm+WiK5SwvJWZTP0QfeZcoVldhf76Gtv4pS0xIaEqwEep0twxqBAd8rJM8CGIyy7FWUZa8a9fGJ0O/uZFf1AxPWfxgDA/Z45Xqc1U/29z5H128fxdvQgizNSMG938ex+zDWx1+i/809SXc/0b/7q0dCWc2lv/08jd9+AEWOiawvb6LrsTeTMgADkIvKGGrnUAVIMvRlzCu+hkOnn4lqHxCac7jNSa1srM9tR1Ap0C0IGZx9TzXG7GPU5se0DaCnP5ZoIQgCM4qv4NTpzfgDoRl5VlolkhTkeP1zI762oRAM+obsZ8XN5aj1clw2X1IGYCLvmX53J//93cvseWZixRsHY9LUGK6p9fPlb1ppPB3gZz+Ov4RLhLTVG8i8ZBNpqzegyo3cjIbiVFq2NuJ3+XG09VNv2U152jKabYlpYV7f8IFShUz7YY3hcwiZIYWANTRJGHD9WB//75hzBCYaki+AFAjibeuh5RdP4W0dnWzyUK7JeG4fgGxjJSnqjKi2gWxenTojqRrDGddfQO43P46/Z2iXWzyF0wF4/LGV4YqzluLyWCnIWBjniInFu0+fpu2EbVLpBgGYm2MzycsXT1zth0mzEhigiB487B0VPTR12WqkQABPRxsyrY6sy6+h/9hBendto/twBwBp0zNxmZ2UmBbh9NkoNM5LyA5KlFAjE+Uf1hg+lxAEjFeuQ/JGyAPGTZHP1idGxmU/11CXZDPlnltj2uu/GlsQaHjEH7TrunawsPQTcbeVZi7naHNE+74wewmCINDnaEtqJeC32kHswl09dALhcHIRHn9sQpZGlUq/q5Ng8NzTk8/7aDFqvRxTnnZSGYK1ny7G3Bj9W635dAm1eyembsakMQJjpYga5p1H058iReF7d2+j8PNfo3fXNrSZOgSZQMGaEgRRpPN3zhA7IpCYDplIlVEU5CgNKrx9Hgo3ROohOLvs9BzpSOo7vJ+RnlLKxjk/mLD+36z6Nf6AG3dVHYqczHD72Z8nK2o/f8+49DPUzN3cX0efqyPMWBuM3NRZ1HZuC1fFazcfItNUiV6bQ49t5Dr6/TuPkrJkBpk3XUT3I7HaWIIgxuQsDEYwGMv6a+s5TF76PCQpQFsSLMjl8742ov3kMnVM0DkY9PPm3jvGv4bAOKFwliEmJlAwY/gs7LFg0hiBMVNEz775BCHcpkhRos1Joerhg/Q1RuhthcZ5CXnSg9Pb40EmKlh1z+W88elnmPe15TS9HrqxKj85n9dvejr57/EhhkXnL/72Xl/CqODvtaOekoPcpMe+f2IE+uq7djCv+JqYdkEQmJK1lKqWMyVFizbidFuoa01OoiVgs2N7beiVsyyOzPpgxHuW8tLn0e/sIBDHQAyHzp6qcAwBQuJ62emxVNl4gWHpzHWMl4DceKN6t4XHvh0dFL/hl7Mn7HyTxgiMlSJqP3qQtFXrCTgdyLQ6UmbNw34slB1sLDMRcPsp2RiaqTufViIh4QmMhCc9/HYJKbxL85t14ZyBDX+PfRg/xMRAUCvRzq1Eu3g23X8cn4Sx8Ubmx9egX1KJu7GTQL8TV/X4B/46bSdxeMzoVBkx2/JMc6nr3I7b109106tkmaZTkruCxvbEDLkBDFBEU5bOimsMhCGk14fDiab/Jn0MQG3z6zEU0bhGYJjA8GQa+Afjn/8Xm7z2z++OLqFtJJg0RqDxtJ+Dh3x84qNafvn75Lnetn27Cbic6GfPJ+jxYN3+Fn7bmVm/BJ3vtiFTy8lfUcQRy04KjfNosR1J2K9cHJ6u6vO7effu3Zx/5wW4uh0svn09GXNy2Pezt5O6/l5HM1bnxIm1eXyxQbn3I0S1Cs386WgXz0ZVUYT7SDW6FQto/c5vcLyT+P95Nib6dx+Abn459V//CwAld3+Gxu8+OCHn2Vl9Pyun3YpGGU2uEAUZK6bdyhvHfoHH109zV/KZ8oH+kJ/aebA67nZ/cHi+fTI6RecSS2+cwjuPNRAcIUNoIu8Zj6+fLz60kMfjGIL/+TyBwgIZa1erOFHtY9/+5APD+Z/+Ik1/+g2Zl15F/5EQn1azaj1N9/2ajn2tdB0MJapkLcil1LQYmSCn1LQ4YWB4uMIYAEHJR2+1mcb/nkKTqcO9v5UDv9qG35nc8rbH3kBt57ktK/d+RMGffoC/swfH7sN0/+ExkCR0KxZAkoqcAzhXv7uqMJOSu24OvS/KCr9v/H8PDXdY0pCkIA3du5iRf0nMtkT3ckKcydkYnDF89rklpCHjFjJBjl8aP02wsWL5p8pAAK8zMGIDAMPfM9m5Mjrbxxbkzq1Y88HMExigiN58Ywo/+3Eq3/9x/BttSJzhk/cfPUj3y6HlX9Gt3wQgtTyNvOVFCAK072lBIxTQ2l9FTkp8nfHBUCl0w273nmE8dOxpAkCmlpO7rJjC9WXs/v5rwx36IUYB596jaOZNJ2XNInytnbirJueS/mw0fPOv5+xcrZbDlGWtRBVH0lkuU+MfivGWILcj44YLkXx+nEfqwrUFzkYw6BuSIaSQa/B7z60REEUFM6Zsimlv6drHkf+2UrkuB5Vu/IbBi67UIggCL//Hgdcr0WtJfuXzgS0qM1aKaNAbWop2/zdUKF2Rlh6+qU+/WosUkHBbQ/xbgWZmZV/Eie43E/arHIb3DIQVEfNWlVK4vozMBfm0bKmj9t9D67n/L8LltdFhm7jvHAyGWFrmv/wLQS5DPauCjC98DEEVmt1qz5uJfft+go7kqnWdK3jbz51mTlAK0NC9h8q8C2K2FaefR11X/DhAoviYY98JtHPK0C+fPaQR8PqdaJTxjYBSrjvnReVFQUZ+VmypRoutjhXfysbS7OCte8deC3wAr7zg5IbP6vnIdSm43RJ//1Pyru0PbFEZjUagtGT0UtLdLz9H7sduwt/XiyxFj6aolI5nQynzc29djM/p4+TjR3C09SeVJ5CoQIbb18+8r6/A1WXn1OOHSCk0cui3Iw+2/a/A6bVQ3T7+BYHiQfIHcB06ScuXfop6VgXaRbMwXrmO1GsvounmiaOpvp/QYjkQ3whkLqHR/E5cNk4iJpyo12L5z/Zh6wt7/PaYeMQAlPLhV9UDePvdu4fcNqALdDacbktYX2gA2w/+dtjzvPobNdPX5bDi5vJxo4teeJmW+35lw+0aW8b8gFrKJ389G6VGxuY/1NF2amLiepMmY9ioF5g/VxF+JQtPeyvtTz1C9+bn6XzuX3S/+gKpS1YA0N9sw93jpGRjOTM/PZ8G617qLLvwB70JMyYNmvj1SQH8QS+9jmYO/W4HjrY+Km+YjzYrhXlfX0Hm/LwhjxsJZAYtuvllKPMzMK6eQ/nfvk7xHaHC75nXr6PkF59FkZUafgmKEDOj9Ne3kHn9OlTFWeR+8TIq//UDlHkh2Yupj3wb/fnTUZflkve1q5j66HcQlPJwH5mfWEvZfV9CkZWK3DiyB/ZcQzW1BEEemiwMGIOeB56h+Yt30HzLjyfknKY0kZNNuaxYrWJKmZwrPqLhkSfTkZ0hw3zt23qeej6D/AJZ+KVUhu6rbfuy+NcLGaxYraK0TM6adaphzjR+CAR9URTKAShkGlZOuy1u2dQBOYmhoCrMQvL5Sbt69ZD72JxDi8Rl6suH3PZeoL/Lzd4nG8c1X6CzPcDnvmLgD49kMmfB8HWWh8KcC7ORJDBmq/jHt47y4G2HuOSrQxfqGSsmzUqgps4/ZgG5lOmzSZk9D21pOf1Vh+l9JzQjr3o4JA+hNKgI+oKUpy1LgiI6NOyuyLKtZUs9LVvqkavl5C4vpvyjs+k+GF/TZaQI9Lvwtprxtppxnmym7L4vhbdJPj++rvhxk6DLi+d0F+1/eQn9shnoZpcSdHnofPAV+veEyvO13fMc5X/+CpI30k/A7kLyB4fsdywQlSqCXg/pqy+kZ+trpK/cQM+Ot0hfuQEpGKB37w6CXg+iWoPk85G6eDl9h/cTcEbLQeT84PO0fuOX+M1Wih66k7bv/Aa/OXS9slQ9fvPEZFUC9FqD1Nf5qa/z8/Nfp3Ll1VqePSPr7fVItLbEn0nf9PEeXM7QfdZQN3zy4XiiqeddpmQtj2lXKVLIT5tHc0+0sN+Ay20oyEx6VCU5yFKHdpE6PEOLxOnUsdTVRDAos6g0rUYuKtjX+SyiIGNV/qfp95oRBRm72kOU4CnGReRqQ4qzu9r/SUHKTNRyA7W9oSpdBSmzsLhbWJZ7HXafBbmoYEfbP5K+nkQ4f5WamhM+ZNU+jhyINaq3fErPqRof1bU+7ro9je/+xMK1m3Q8/owDc0/o/rF1ufnI9yspmmPg9x8LeSqUmuTptyPFpFkJqNUCH7lCy6P3p9M6iuh65qVXocjIxLpjC/4+G90vPYurIWThs8/LR19kZM7nz2PelxZTa9lFnWV3VIWj0aDPHeu787v9NL9Zx+7vvTqmvs+Gr9OK40CSM5YBLTe/H01FPv3vDqL2SRKOY+euwIdh7iI0BcVR+tU5V1xL35F3EQQhHNPRTZmKwpRG776dpFTOQj9j7pB9hlYEoxftGwu2v+1m/YXDz+pFER572Bk2AOMNQ0bpsNtPD+H2ASjNXBqjQxRIYATcNS0oi7Jx1wxdktXuHloTyajJG1L7KB5kgpz5mZdxwrqFvZ3P4AuGAtouv409HU+yu+MJ1HI9qapccrVT2d3xJHs6nsSgzOKM5mpMn/0+M3s6nmRX++Nn9htf3PFtC6++4KSlyc83fhjrFhME+MQ1KVx+sZa6Bh+XX6Tl/r/3c9nGiEz307ef4NArnTz6zVDCmCAKvPVg47hf6wAmzUpgrBRRBAGCgbgMB1EhUr5pOofufYcpV1RGpHQVaZhpGPVqwOY8d0p/EB1c1M4sZvp/QqUUJV+Ak9f+NGpfeWoKaVcuRRBFHIfq0S2sIOiMdg/4redOdK3v8D6CXg/KrFxSz1uGr68X694dpJ63DHd7C6bzV+M1dyHThur7KkzpCIKAqB66StV7idONAc5fFlnuLzpfycmmkOvQ65WYU96BKU2kpnr8Z/6iLPTY6lLz6DMPbci9fictloMUZyyO2aZRppKbOos2ayS3IigNT2vu33EUgkGU+UPP6IeTi5aJCvTqbPqGqSswGGnqAmzeTvq98Q2LVm7EE3CSoSui3VkdlnjJ0JTgDQxfOD4oBVDJJsblaTEHeOYfdjTaWCOUlyPn3vv72LhOw52/6uWbtxlZvUKNOMg23vbIeZHrDEgEAxIavZyTOyamutikMQJjpYh2v/QsKTPnkrZqA3JjKpmXXoX9+FFcDbUxKqLFxgUIgoDN3TGsAdCrh58pmM9I4+YaYzm9AO2240l9h0QQ5JE7xVXdSutvzkgEn2X4sj65nqzr1+Gqb6f550/gG0b18VxhYKZvO7AnqkaAZWcomOyoOxXzPQRRhvQeCIuNBAp5dFGewwd9fOO2kCtq4GsIQmxVr/FA9pSlI9638UxB+ngxgClZy2m3Hg0/A4lWAlk3X4K/147kD+Bt3R53H1/AhdNjQatKi7s9Qz9lxEZAJUvBfUZ5dF3BLZywbsXibkEjN3J+zsdJUaTxRvOfUMg02AcZCpVMM6wREBDQKdKweSeWhXP9Z/T87Y/Rz97td4XukWMnQhPd39wXYkspFBGD8ccb9oXfr7+llMKZBvY+OzbX8nCYNEZg/Vo1fp/E8y8Nb8GHg73qMPaq2AIS3Yc7yFmcT/fhDlLL06janlh3XibKOW/K9UNur+vagdcfEqAbGOyXlt3M7rrxTf4ZgLo0B9PFi+h4YDMwfEyg6x9v0vNsNEPJvvcUhlWz6dt2RpNEFDCumk33P88NoycK8fjocdriGQDbC1tIWbMo5v0Aep85N7kZn7hRx7e/Evn948UEzN1BvvNDA9u3dhMYR1umTyvCbTfTVJXY5ej29bPj1F9YOe3WGHE3nSqdpRWfZVdNqM6EL8Hs2dc1snhLbec25hTFcvMBKnLW0t5bhcubeJLX4axmee4NNPUfpn1QCc8Bd5BOkYYgiLQ7TjEjbR2tjpNIBGm1n0AURApSZlJ7xv3U543UgJaQsPsmZla9ZmNk5VpbPfKEUZ8vcv/f+vBCNAYF+55rw9LiwtIysbTnSWMEAC69SMP8eaEl9u/vHT86lL7QiCZDh6kiHXWaNvEBQH7a/GEpbW2W5CUKkoVMr0E9JQdNZRGZn1iLfVBMQFCEWD0D8Fv7kXxDjzT+XjvZN29E8vjwmW2kX7EUUT069sJ7iXM1yMdDqklkxkwF8xcp2fa2h80vRR5OpUogvyAy2+7uCuL1SuTkyHj0X+k8cJ+dptMB0jNF9u0ZW8JU45EXScubRf60tbSe2pJwf5fXSnvvMfJMsSJkg8tB+hOIuPW+vAdVaS5+y/Aryx57bPGYwShMX0h1e+IcHX/Qy9Ge15mXeSkCIh2OaOE9h89CsX4+p/sP0uGsYWnOx5EIsqs9RCO1elpZnns9kiSxs/0xtPLR1SlJBm+/Gron1BqBFetG58o89EpkhaLRT/wQPWmMgNkc4C9/s1PfOP4+VEGEnqpOjGUmeqoSLwFlopLSzGVDbrfYT+P0Rvzz0/M2AqBWGMLvAU60jS04XPSjG5C8fjxtPfT8ezuWFyMrGM3UfMr/+tXw59PfexjniaZh++vffYLcWy9H1KhwVbdw+vZHx3R97wVErZqgc1DGqyCgmV2BzJCC+2R9mCk0EfjbP9JwuyUa6/1cfZk5yh00d76CN3dF3IfXX93D/n1erru6h69+K4Vf/dGERiNg7g6wZklXnN5HjvSCULBcox+5hHZD9864RmAwElFEM266CF+rGfVFS6IKp58Nb5y6AYNRkDaPus5tQwatM+euxmPtQgr6sbTUsN/5Gkq9CadkIRBw0zTNS6p2Hr21hwjMK0XfYOd01xHcM3No2/UCutxS/M5+HLOyaGvYg7OrGX3hNPQFUzlweDNZ89bi6mnD0V5PxqwVWGsPYqpYgLXmAD772O6fCy/XMm2GgooZSv52z+gS47oandS+E51c+IEoKnP4qA+1OrRcrSiXU1M7fsageUsjQV8AKShhKE48G6jIWTNskliLJTqle6Cq01DVnUaDQJ+TE1f9JO627n++NaQbp+Fb9w/ZZ8df/0vHX4dWbbS8uCfK0ExGpH/2GnzNHfT+543Q5898BN2yeQR6+0lL0dF0y+3jfk6rJUhl0dB+7N//qp/f/yr+yvXkcR9fvHl8aateZy8KtZ7m46+P+Bi720yn7STZxliplLSUEiz2xrh6/4PhN9vofeUdTGNcQSpkGkoyz6euM35cwdnVROqUOZirdgHgsZkJeFwEvG7kWj2unnY0Gfn01h7C57DhMrcR8EZLYXhs5qht/c2nkAJ+tDklAIhyJVIggPnYTnKXXILP2TdmAwCJKaIjwQe2qEx2loyf/shIda0fn18aV3fQ4u+txNvvxW1xEfQH6Xv00JD7pumKKUpfNOR2gI7e6ICvWmGgwRwZPAVBIC917PrfhpkL8Fq68XS2oS2pQBAEHI3VGKbPQ5Kk8LaMFRdgrzmOz24jffFqOt98AW1hKX57P2mLVtFffRRXezMZyzZgO7YfT3c72euvpPOtF9AWlKIwmqL605VORQr4cTSOTvdeoRDIypPT3xdEoRAom67k4G4X6VlyCkoUNFR76ekKGXmlSiAtU45aI9BY4yU7T44mRaSl3ofeKOL1SDjskSm3qqwQ+9tnuNPFeaQsX0D7T+7D29hG6tWxGbLJIH/+RfQ2V+Fz9pE9cxXN+15El1GIy9pO3vyN9NTtx2XtIL1sIW5bF05LG4bcClT6dBzmJjZdZcPtltBoBBRKgc72MxMZCTb/x8FFm0LuRb1RpLM9gDFVJD1TxhsvOWhOYgWsNebg8zhJy5tBe+3OER9X37UjrhEoy1qBxd6YUNNfnmEk48aNCIrEw4Y/4EEuG5pCW5q5lBbLQTy+WIaao70Bl7mVvKVX0P7OywQ8kQExdcpsFClG1Gk5iPL4xkgKxtfrEeVKJL/vzHtFSPDO7yXgc2Ot3h/3mGRxx7ctpGXIWHexhm/8MJXf3pm8YfnAFpVRqQSOHBtFMZkRwFqdOAikVug5b8oNwxaVh1Dh+bMZRTmpM6OMgCRJFKcvptU6triB19yJuzNEQ3W1NJCx4kLsdSditvW88zZBT/RMSAoE8VrN+PptuLvaCHrcBNwu/I6QP7fr7f+SueJCure/itG4MKo/Z1MdWeuvwN3ZSsCVfKD+wo/oqZipZvurdtIyZcyYr2bvVierL06h9bSPT34pjT/8pIsZ8zWsvFDHX+82o1QJfOmHmdx7Zzc3fyMdv0+isdZLZ4ufU0ejv1vQE5phZX/vFjp//TDexhBzwr713aSvdTA6qt6OmVECBAN+/F4XPldkYuIwR1Z9khRECgb55wPD+8o3/ydxJbuRIOD3IcoU6Iy5wMiNQJ8rfqW7tJQSFpR8jGZLYtEyf1cv6oqChPvtrP4Lqyq/PGRegExUsmb613j1yE/jbkeClm3PRM7rDv125mO7onbrPBCJLbTtegFBlOHsPB2zTRBF+ppCz05f08moPjr2xlZOIyRfAAAgAElEQVRJGy2+/RMTMhFstiD7dg0vrT0Ubl+1LYZVJogTlw8zaYxAZ2coJuDzS6SkjO8XPvnPxIPx4rIb0SiH97sFJT/Hml+MaXefJYqVnlKKLzD2iH7qvCX47f1Y9m3DtHAFPbveQJmeFbMte93leK1m+k8dxdV6mqw1l2LeGesq0OQVEfS4sB7YhRTwI9Pp454rde4SAKRRUlr0Rhn9tsix/30qMjiqNQKWbj/BAJy3QovXIxEMgtsVmfELAmzdbOeTX0rj6QejZ1LOQycwfexi7Fv24mvrwl0VCZbL01PHlDFccN7lePrNWE9HV3VSpaShyygi4HXTfTI0COXOvYCu4yE5YU9/D07LucsZaat+GwB1SvIZuFZHEyZdUUx7pqGCHvvwyYPJuIPcvn6aevZTnDH8qjrbOI1OW6yAW9A/OlfKUJTioVYH441XnnNQNlWBIVVk/mIV299MfhyIRyueCKrxACaNEVixXIXFEuTgYS9f+IyeX99z7rjtuakzExoAgNqOrTg8sauKE+2vsXjKJ3F5e1Er9GgUqRxoGntpyY5Xnw2/79kdmtUE3C68PV3YjkWWr+2bnw5z6r1WM/3Vx8IPw8BxAC3/fji6/1dCMy3bsf1R/fUe2kPQN3oGizFNxpG9kZv/0o8ZeOCXod/twC4nWXkGisqUpGXIePOFyOza4448qKdrvYhxMuV7n3qFtBuvxHjlWjp+/kDUNvWsctynRp8FfXpX5Hds3hcy9gMz/rq3/h7er6cu8lvZWqNnlecKhTMuQJKg5cTI4wIQojafV3pd3G0VOWuGPTYZdxBAbedWclNnopQPzcibU3QVR5qeo9P23vyO441NH0+hudFPICBh7ZmcOS5nY9IYAYCyKXL8fonsrHOjZqFTpTMt9wIyDYmFrTptJ2no3h13m9vXR3XHW6gVRjz+fmzOtoSKjOONwTOgsSZYjcUAAPz17ugMz9efCw30Tz0QmqU//ufQ39/+IJolM9D+4G9CBuOOL8e6L4JON+a/PBX3vLbnxp7zMFmT0wZDEES6mw6Smj01KvFuJOjpr6fP1R5XGHGoOgAD6H7wvwgqBboFU0d0Ln/ATXX7m8wqvHzIfURBzrzia6jueIvGrt1j0vKaDLjz/86dZPh4YdJoBx2r8iGKML1Swb5RRtVHCqM2nzlFm1g+9fMjMgB9rnaONsevUzoAu8dMh+04VkczEhLFCYLLH2L8MVr31fsN+dPWklEwF6+rLykDMIC6ztFJnWdcfwG53/w4/iQy0Futh+mwnUi439ScdSwquzFhTO5DjD8mzUqgsyvA1u0eOrsm5kGWiQoMmlwyDRWUZo487b7f3cX+hieHTakvy1xOvmkuh5r+jVppZGr2GqznWFfoQ3xw0HIy5OJT60Y3YHb1ncLu7iZFPfI8AzijNSV24a5Ojgpd1fISBk0O2gQuV5OukOVTv8CumvuH1SAaCZRyHekppaTrS0lPmcLWE/eMqb//ZUwaI7ButRqfT2L1ShWvvu7G1jeyQI5Rm8/GORNTSKS99xhHmoZfAUAoqLat+k+cX/Yp9tT9na6++IW4h0NZ9irKsleN4ipHjhbLIapaXprQc5yNWRkX0tJ/FJmoxOpupdy0lDb7CexeM/kpM/EHPbgD/fR7eyg3LaXasp0S40IcXgtBAvS4mtAqUtHIDdg8nRTqZ9PvNZOfMoM+bxftjlPk6ippd5wM68wkg/f17y6MnkCxq+Z+Vky7NeHAPBi9L8d3hyaCP+Bh+8n7WD/z28PSRiFEr14+9fNRbUEpQE9/A16/nYDkIxD0IxPlyEUVKepMtMq0hP2OJ97X90wcTBp3UH2jnyWLVBQVyPncp4cv6TjRCAR9HGt+cUQGACBFlcXyis+F/w68PgQ4fb2kKEMslqDkxx/04A2E6H5quT48kA1sA7B5OkjXFIcHdaevl35vd3i7TJDjC3po6jtMiXEhAsKoDMD7FQXTL0ClSyM9f/S5KJIk0dC1K/GO44h99f/A7Uv+/yQKMjIN5eSnzaMofRGlmUspSl9EnmkOBk3uOTUA/4uYNCuBxtP+c8oIGgodvcep7nhrRAJXA9hefd8EXtH7GxJBFKIaF7H/205HNWWp59PYF52oY3W30ufpYlraamqsO8I68gMQRQWegIOA5MMf9NJmH1+11smO1pNvUrbwozQcfn5M/bT9//bOOz6O6lzYz2xvWvVebdmW3HvFgG16DZ2EEkgIEFp6497c1C8hCSn3pkAgEAIhoYQSsOk2tjHu3ZYtW1bvdSVtrzPfH2Ptar276hIi3sc//6SdOXPmzGr3vOe8tfsIxZnnolObx2hkA2N1tbKr8q8sLLyRRMPoKu/FGTsmzU4AIHlq7AIi402XvYbdlX/jcP1rwxIAAB6/I/jfL3pJNhaE5RA629Eo5URaepWZRG0WWUbZu8Tus8iJnfqdA8gwFJOXIK9yRSJtRBZXPRKyulCU/FHb/CeTPf083A4LmVNWjKofUQpQG8Pjbbzw+GzsqXqWyraPJtyDLk50Js1OQKUzodToJzyHvC/gpqWnjPKm0UUNZphnkJU4i1RjIa295dR3jU0Y+qedmt7wKN6DbW+GvT7cviHiXLuzCqWgJtCvyIn3dPBdX3/VPXvCfp5NKJQqkER8ntEXBWq0HKR0ghcsohSgqu0j2nqPc86ML0/oveNEMmmEQPqsVUiSNCYCQJIkRMlHQPTh8vbi9llx+6y4vD1YXa10OwbOtjlcZmZfjMvXS03HToyaFMpbPrl0x/8pBAapcnU2IwgCEqCIFk03TAKiH3/AjUo5srreo8Hu7gymjVAr9WQlzSQzcSappoHLZg6GzdVGj7OJLns1nbbKQYvlnO0I0gj8jMd8EIIgCQrFhIV2D0bmmqtIXbY2/KAkcvJPP4oofB68xlxKVuJMUowFtPaW02Y9icVRF9Eu7+rPYy5dEHG8bct6uvYMnhs+GimLVpN14XVhx6r/9hvc7bHdVGONIwxJQvT7kHxe/A4b9tqTuJrrcDbV4Ld/8vabOP+ZJBpySDTkYtSkoNcko9ckolMnoFCoEVAgSn4Cog9Rkhd58kKvF5fXisPTOeaLvMmMJEmjzrEzaXYCGXPOB6DtSOyJ8IIbUzGalbz5dDuFpXra6j189beF/PLLY1sw3VwSxTYhKDDPmEv3oeg61DbrCdqsJ1Aq1KQnTKcgdUlUIRCL1KVrsBzYhuSfRKsWQUCh1oBag9JgQpveF2Uq4WppwHriIF17t36iQ4zzn0evs5le5/iVU4wTzqQRAgqVmq5TA2eBLFlk4PUn5FQDMxcbaav3oFIJGM3ytthhHb0qSZ+Vjzoxen1Uc8mCqEKgKG15xLEeZ+Ow7qsyJpA8bwWWAyOL5pxYBPTZBeizC1AZEujY+UGwhnCcOHE+XUwaIdB6cCMF591E3dYXY7ZRqQX8p2txqjTyLihvmo7PfUNeoT71o+FNvNGIugs4jbGgGKXBFKESKkhdQrejgV5nEy7fyKoJAaQuW0v3oZ2fivw1faQuX0finKW0vP8KtlNHB23/g21rSEgdfVnL7y/ZhMcZ/j5d+e0ZnP+FomH3dfLjLp66Z+iGfIVS4KL7i5myOImENC2mVA06k4reNjcdtU5aT9mp2N5F1V4Lfk9IxTllURL3P78MgD2vNvGv/zk26L1W3pzPdT+cGXz95i9Osu250A6zf58AL/13GfteH3gVnTXdxDffCFXO+/asgW1YCqXAlCXJXPmtGfLzpqhx2/xYOzw0ldt45QfHCPgHVysXzk/kwRdCC6ahvgdDZaBxvvO/lVRs7xzSOGP1O3ttOoULkkhI1WBK1eKy+eiqd9JUbqN8awdVuy1h/ZvTtXz33dVo9EoCPpFfXrad7uahZxVVqhX84vCFgJwd5A8376ahbOTzSywmjRBQ6U04OwbW5T37SDNf+XUhljYfjz1cj1avoPaEa0wmfwBdZh6py9fFbiAoyLvqdupeejzs8Ecn/0SaaSqJhtxgml6n10KHrTJaLzFRm5Mpvus7VD71S5Am3j7StmU91pOHg68VKhWCWoPalIg6MYXUZWtRJ0RWZlMZE8i/9gsAWMsP0rj+7xM25okiKUvHnX9cQO6s2D71yTl6knP0zFiVynl3FALwndnvjyS9z4i5+Wdz8LlEDr8bvXbAcFh6bS43/nRW1Fz2xhQNxhQN2SUJLLkmB0mCNx85wcfPT7w+fijj/OLjCwGGNU6VRsEtj85l7kWZUc+rdVrM6VqmLE5m9W3y976/QLV2ePjx6i38bP8FKNUKvvfean599Q46agavK6HRK3n4g3MB8HtFfnXFdrqbxqfg/KQRAnkrrsbd2zlgm94uPz/9QhVqjYAkgdspjqk9YKBdQB/GguKIY6unfxmnt4seZzMtvceQ+k3ggqAIez0YmuR0zKXzsZYfHPI1MREEFBoNmtQMJL8fT3vsEokAAacdX29kFkQ3spC17P8YfXYBKYtWY565EEERGWZinrkQBhACr/+0HLU2enhK/tzE4JepbGM7Rz+IXQ/a5xn4Pd38lxpaK4fmQmltH1iVlVOSwF1PLMKcER6Z2njMSuVuC7YODy6rn7zZZvLnmsmbkxjM6PBJ+F2su3fKqIXAnAszuOEn4RNrzf5uTu20YG13o0tQkzXdxNyLMtAaVQgCXP1wKY4eHwc3DPw5G0uGOs4l18jBaUMdp1qn5At/WsD0laH8TAGfyImPu2g6ZsXZ6yMlV8+UJUnkz0mM2Y/XFdqtKpQClzxYzPPfHLy+yXl3FGJKkXfMHz9fP24CACaREGjc9SZJRbHD4BOnzCXgsmNvrcHnlUievghPTweurmbS552Hq6sZd1czGfPX4rK0EPC68dl7MGYV4epqxt5SPeg3MpoQkPw+BJU6dCBKpaTG7tCE3T8XS4etkkxDMa2O4ZVpTF9xIdbyQzDKtLr6wqkICiW6/ELUicm0vfnyqPqTDcJ1NL1VR+eujWRfciOGvKkRrVKXrY3p6XT0/dgTu98jBoVAy0kbB9aPfDI5tcvCqZ2DV5QbjMRMLfc+swRDkjrs+CMXb8PSGP7F3Pu67I1lTtey+DM5FC+Lblsab3JKEph5fjrlW0eehO2GH81CoQxNrL1tbh67fW9EuzceUfHT3fLuWRDghh/Pomq3BWvHxNiIhjpOjUHJvIszw8Y5kBC47gczwwTA/jebefMXJ3H2RLoupxUYOPfzhaTk66P21XLSRnaJXMBp3qVZ5DxZQ/PJ2OkzDInqoFrT2ePjwyeqY7YdCyZNxHBqyTKUmuhvYjSMmUUk5JcgiQE0piRsDScxZhYh+r1oTMkIp5dinWXbERTKmPVI+9Bl5qJJjqzU5GyqHXQstZ27o/7PNc1Gqxx+HiRtejYJ02cP+7qIfrJycNZW0r1985i733q62qh94bGo5zLOuxxd+n9GWoBbfjUvTACIAYkXHy6LEAD9sXZ42PxUzbDsDKPF6wpQsz9UVe2Ce0fna29MCX1f3DY/j38+utOG2+anfEtI2Gj0Si772vRR3Xs4DHWcz3/9cMQ4Y1F6blpw5wCw4dEKXvxeWVQBANBZ7+T1/1fOX78cvTznhkdDCSUFAS75ysDp69d+aQq6BHl9/sFjVbhs4+sxOGmEQOvBjbQe2jjkzIhdJ3bTdmDj6Venk5D5fSAo6Kk+TNKUefIZhQJjZiG6pIwB+4u1C3DUR67ilXrjkMaoVyVg9w6+GnU2VEUcS1tx4ZDuMRA+SxcZl3yGtAuuoHffOKQHkES6dkcWchEUSrIvu5m+v8unmalLw7NsvvRwGfvfmHzui2qdkk39VoyFCyJtN0NFqQ6fFjY8epKuhti1pl/6/jF8/arCLf5MZMGa8WA445SkyHGa0yMTzwkCfOa/S8OObX2mdkjjiaVoqNjRxcmPQ/PArLWxU3ib07Wcc2uo/OfOF4eXtnskTBohkLXgAlJLlsd8J3trjmJvDen/XZ2hQKjGj1+TC0k3nKBlz9u4u9uo3fQ8zo4GRDFA64GNODsGfjOjTbptW9bTuXMjfnu4RT7v6tuH9EyiJAbz5gxE7Qt/wtUaPj59dmQd2OEiKJQ466pQmRJIOfeCUfcXjbatG6h47McRLqL6rHym3vmNcbnnRDF7XWjh4PeI/Gj1Fg5saOGe+03cda+Ru+4d2mJgIhAEaKty8OxDh4LHCubF1lUPxDX9JsHt/6hn9ysD18ZwWLz87cGQSnQ8i6L3Z7TjvO13kQu/2343n7SCUDnMD5+sId80h2mJy8k1ziTHKHtq9R0DyDGWBn+a1CnkmWYzNXEZBlVIED91z372vBoaXzRVYWq+nv/adB5qnTwt1x7oGZE303CZNEKg6+QepMDItz0x1R2SNGLrnK1Kzk5pqwzPUmksmDak3YBEAIUwNLNL586NEccMeaPb0it0OrTpWXR99AEt/3puVH0NhN/eS9feLRHHdRm5YyLMPilmrwut2A6/24rDIle8qzjp4+knHDz9xOBeHhOJ1qji2IfttJ02iK+7N9JeMxRyShOCv1fsGJpdpeZANwFfP4eICRAEox1n3qyEiHFOWx4+OR96Rzawd3uasXo70Cj1wcm929NMglpWIRtUSRjVKaTqCvCL3qjOIO/9vjJoKL70q5EqoYsfmoZSFRrP+l+dHNIzjZZJIwRSZixFl5z1SQ8jiLujOegpY6ssCz95Onp4MDwBZzDb5WDYTpXh6Qw3VKWtvGhog42BNjMblArM8xaTdsHlo+prMCwHPo4a7Zw4e8m43nc8mbI4pAo6+Fbob7Nlk4dbbjdwz/2fbN2LM9HolUiSvHoFmLUmnewZwxujIEBmcWiB03R8aPn/fW6RroaQnSQ1hpF0rBiLcap1yohxGhJD9h9rh4eWkzYa7GV0uRuw+TqptR7A6e8JO9bsOIHT38Opnh3U2w7T6jxFjXUfTn94NmJrh4ctf60FoGhhEqXnhdsgF14emv8Ov9NK/ZGxjwmIxqQRAm2HP6R571sDtiksWoNSqQl7XVB4LoKgoGjKuuDPgsJzUal0KBQq0jNmk19wDgAFhedG7TeUDiGE7VRo4nfUnYpQd5hLBsm7A/R4WujxDNXDRaJz16awI6Yppeiy8oZ4fSQd771J14fv0rnpbTo3vT3ifoZCwOXAVh2Z1z+heNa43ne8MCarSSuU1QKSBPWHQ1/I628ykJ6p5MnHRp/FcyzpUyMceqeVrgYnggDr7hnebiAhXYvWKO9e/R4Ra7t7kCtCWPq5MWYWj6+AnIhxtpwc/t9XGsSjb+tfa4MuyZd+dXqYCbRvVxLwibz9u+F5FI6GSSMEhoQgEAiEF6FXKNSUzLyO1taDwZ8gkJwyDZ0+GY0mIXpf/YhmFO4f/SoF/Nirw4tlG4agEsoyzCDTMHgh+z56yw/h7Qnf1o7GQKzNyEZpMKI0GElaumrwC0aJrSLS/1mdmBLV62qyk5QVyqppaXSFeWi8+rKTzvbApNsJ9MVfiAGJLU/XAjDvkswwHfdg6BNCK+Heds+wNKn94y3OdKkdayZinO1DCOoaLl5XgPf+IAeR5s5MCAaiFc4P2W8+fr5+QO+zsWbSxAn0R2E0YFgwG1VaCoFeK7YtsmeLzdpEfsFqnI4ODMZ0/H43SqWayor15OQuD/4E0GiMeL1GujpPUDR1YKPomULAZ+3G3RZuZLJWHAnLuikoTieUO7wrZr/egBO/NAx/aUmkc9cmci69KTS2GXPRpmXh6Rx+8E/C/MWIbvnDpMstoGfv+JYTdNRHj5DWZeXj7R44EHCsuefpxUNq5+zx8cNVkTENenNocnB0eyPO/+O52N4yQ2HZ9bksuz53VH2cSX/99t7Xm7n+tA/92runDDk9g9YYcp3sH+g0FHzuUHudcfRprgdiIsbpto5POvO9rzdz409lF/BLvjKNoxvbuezrsluts9fHpifGNiHmYEw6IZB29y1oi4voePw57Dv2oUpNJvu/HqLl53/A0lWBpUv2ue3qCjea1Nd9FPazPyeOv3r63LaIc+nnXII2NTwsvPntFyLaWU8cwj57CaZ+6o2si27AWnGUgCv6ikGpUKFkeCuiniO7UKjVZF1w7ekjAsVf+BaVf3kkYpcwGM6qkH+yu2n8Xc38diuO2gqMRTPCjptLxigCegLprxt29n46ahv0FwIBn4ij24cxWc2y63PxuQP8+2cnBu2jv/+83zPcyTVk/+pT1YwXEzFOtz26o8qZOZD6c2Zup2hIosTJj7soWZ1KxlQjvyqTbX9dDU4evXJHmIF9Iph0QkBbXIT1/a146+RUBf5OC5qifJRmEwHr2Otgz8ypH3A5cDREj9CzVhwNEwKCQkHC9Ln0HIm+G6izHiLTMB0BYVBdYX+6D+8ibeVFqAymvhuRuvwCWt4bXsSvqXQ2CApElxNX49DTWo8Gb28XZyrJ1Akjc1UcDUNNG+GPkX6iv/pHZxr7r0nVHkuYy2Aspq1IYem1I9sxbHuuLuiFsuz6PDY+Xo3d4h1QddI/KZ9KO7zVfJ9NAsDjGN8Ap4kYp8YwfruZDY+eZPrKlWHRzm//5tSECwCYhEJAlWTG19oeeTwtZcyFgDY1M2IXYKs6HjN5m62yDKQbw1JHJJYuiCkECs0L8YueYQkAkIPULPu2knHeFcFjSXOW0rnjfXy2odc/th45gDYjC4XegL5wKo6K8S/I7ndEemmojBNTyLw/o00b4e4nBPrvCsaKrgZXMC1G/tQ1ACgUKuoqN1JQvI76KjkIT2tQjVgIbP9nPWvuKkJnUqHWKTjvjkLe/t0pJDH257H/pDhQVG00+rd328c3E+5EjDPWLqGz3skL3w3ZDIsWJrHys/nDGkPrKTt7X29m+Q2hv+2RAVKqjCeTzzCsUEAgchIW1AN/EY3ZUzBmTUGbmEb6vPPQmlMxF87CXDgLU668Gur72Ue0ylr9vYLOJOBy4GwM19cNZCCWJHHYAqAPy4HtYa8FpTKy2tkgJC5ajtIgjy3gnBif9j4bRH8UqvE1Eo4Hts6QLSc1Xx8RnTqWqFQ6VCpdyLd8jOKD3DY/O/4ZUgOu/Jw8UQV8sW/gsoYm18RM7VAD+AEwZ4SM6c6eSDvKWDIR40zJi+7m6uj2cWB9S/B/7cGhL8z6U/HxxNrJYjHpdgIAqXfehOTxDnis+Ue/CTuvT81BEkW6jtcgKJR4rF14rPJKMGPhOlydTRgyCrA3hYyX5pJ5YX1Ifh+O2oEDNKwVRzDkhzKJDqQS6vG0YvWOTLqL3kiXt+T5K2jd9PqQ+2h/53WkQABEEU3awGkzxgoxSsCf8CkUAj2tbuwWL6YUDUq1gqzpJpqOj09JTb/Pefqnm5z8FXg8Y+cf/tFzdZz7+ULUOkVQreUbQIdu6/TgtvvRmVSoNArMGTp624bmftl/0mytHN9Fx0SMM3Pq5IkIH08mnRCou+c7I7pObUxCoVShTUxDl5qNxpyK97QQQJIIeFxhkcPpqy5GmxYeH9Dy/iuIvoFXMJb92/oZbWWyL74hqhAYqQDoo2vvFlKXrgm+FlRqlDo9gSir7WjoC6aiUGsQNGpc1RPjdxwtvfRoIsE/STY/VcNV3ykB4PbfzeeXl24bl9TQDTWRzgxjhcPi5ZeXfczD769GqVZw3p2F7HhhYCeBg2+1sPJmedew9ktFQzIol6xOI70o5Io6UK6hsWK046zaY4kYZ9UeSzClQ+Y0E4uvzmH/m5MvV9RYMvnUQUMkS1tMvn4mGoWOHN0MWna/hXffQTK8GXRueQuVw0+RQV7ptx/aHPYTosQGSGIwTcRwiTbxAeSYZjI9aeT++V17t0RMoCmLoge8RUOblYM6NQ1VQiIJ8ycmcjea6kf0fzq8a86kf6K41Hw9S64ZW5fOiaK3zc3+N2X7w/l3FoEkxxLE4viHoWybcy/KHJIqbO7F0QuvjCejHeeR9yIXaWemL19x88iDNT8tTLqdQMZXvzSkdvq/7KXWeZSpxoVoFQYcgR5MqmRqnUeYalxElWM/QowslpqU9IgoYWdjTUxXz5HSbC/HoB55Nke/3UrPkT0kLwwJkpQl59G1b2tYBLMUY3lqO7wPXX4Rks+Hs3Z4Vc5GitIYGZw3UfaIscbRHS68rvruDE7t6qKnZejRqZOFzX+pYck1OZgztCy5JgefOxDT8NnfoG7O0LL46uwBPZlMKRoWXxX6Pg0kYMaS0Y4zmhA48l4b1/x3KWqdbDwuWjjy7++nhUknBPSzZR9zf3sn3sYWfE2tSL5IdYIRgnl5bP4ucnUleEQnc8znU+kYOI97tAhhQ34xs77z2xGPW6k3RgiRqYnLcPl7cfpGZjgC6Ny9iaT5K4K7DaXOQPKCVeFFW2Ikz0tetQZ7xXEUag3pl15D+4ZXRjyOoaKO4gnks09MDpTxwOMMoD3tKqg3q7n/uaU88cX9E6LuGEs6650cea+NBZdnsfZLU2J9ZAAiMlde+Z0SKndbYkax3vzzOaj6VYsbiuvrWDCccQpC5DjtlkjVr9vuZ/PTtVz8QMjul12SQMsARWA+7Uw6dVDnUy9g/eAj/N296EqnkXjFBSiTE/F39+DYf5jedzfT++5mNAo9hfo5WH0dBCQ/kiQiSn7KbTvI0hZjUCaSoEqNeo+h5P0ZLgnT50QcG04W0Vj4rN30Hg8XaqlL1yCoQv3GKkzvqKrAVVuF41Q5omdiVq+a1Ei1gN86ciH4SfNWv4IgAMm5er7+2opB3RJT8vQsv3FyqRI+fFKOf0nJ06NPGPhz6eg3QeoTVNz37NKo7XQJqrBEaG6bn/d+PzG7Thj6OG/73fyIccZi81M1YUL+vueWsuz63GF5IH2amHQ7Aceegzj2hEeXKhNMaApyMS5dgGHRXDQFuZw8w4DcTOjLWuOUc6ofsUYWPAHQZYx91avsi2/EVnGUgDv04fEGXCiE0QecNL/9Agq1JriDURkTmPalh6l88oVX6CQAACAASURBVOdIYiCmodhVV4WgUCABnR9sGPU4BsOQNyXqe9t7PHq1p/FkqGkjAE5+3BWzCtjOlxrY+VIDa+4q4rKvTUehFNAaVfxs/9DqM+z+V+OQxzHetFQMPc7mR6u3sPS6XG786WwEAZKydTx6/OKY7SVR4tUflw/reYeTOqN/AffxHqffI/KLSz6mYF4iX3pyEXqzmht/OjuY6uE/jUm3EwBQJiWinz+LxKsuIuOBO8l95GESr7wQZYIJ68ZtNP/g0U96iBEICgUJZ6SX1qkSsPsiC7ePhDPrDajNySTOlic6KYbhVZuRjWFaKdqMian0ZCwqiTgm+X242ibPRDhStjxdy28+s4Njm4det3eg1eYnxaldQ/887n2tiT/duofWUwMLj/ZqB3+6dc8nJvDGa5z1R3p59Mrh5dsaLzfi8WTS7QTyfv0DFAY9vqYWvPVNuMpP0fm3l0dcGOZMNEmRKiJPVxttH74xrH7U5mSyL7kx7Ji5ZD49R3aHDkigV5npZvQ6Und7E/aq42FpK9JWXEBP2d6Ybq26vAIUOj0qcyJKgxFndUXUdmNF4sxFEccc9ZVR6wx8GmmvdvC3Bw6Skqfn6u+VkJJnwJSixpCkAUmiq8FFd7OLpuM2ag50c2rn2CwAxpJNT1QzfUVkVatY1B3q4XfX7WTa8hQu/+YMEtI0GJPUuG1+rB0eGo9beeUHxyfMGDzScb71m1Oc2tk17HHaOj08euV25l+axYxVqSRmaklI0+LzBHB0+7A0uuiodVB3uJfqvd1DjlWYTEw6IaA0m5D8AVSZ6WgKckEQSPnsZyLajTSeIFqUsPXEIew1g/sYhyOQfs7FqEyhvDjGwhkodYagSsgVGNtVQcfOjWFCQJOcjrl0Ad7u6KtTnyXkPRHLjXWsMBbNiJoy2lYpZ68UUDBVO4+A5KfRV4EoBZAQKdLMQUKi0VdB2fudfHfWJkQCFGvlv9NU7XxEKYBa0KIWNDT5KslRF+MS7dR7y5minYtd7EYnmNjw6LGwot7jhaXRxd8ePDR4wzOoOdATU60RC7/Ti0EhC3m7xcf2f9QPuU+VRsGSKzKYty6N3FIj5jQNzl4/NdtaOL7Nwt4N7TiiFE9/8Kl5zFw9kKDwk6CF9DQtf/hsedjE+ruD56LRK3n7T7W89YfasKvqDvfy7Vnvk5Sl5WdbVgLwQOmWAZ8/MV3Dossy+MnGFZhS1CjVAm57gM56F7VHbbzys1NIEkyZb+ZbL8mLkAdnbR0wNQbAtCWJfP35hdQesfLrmw8MuMZsr3bwwWNV7Huxht2HZZtXbbWfDRvdPPdHOx6PfHFCgsC2vRmkpCrotogcOuDjv77Vy75jkXayje+7uf+utuDf7tH/S8JoEnDYJ16YTjoh0Pjdn41r/1FrB1QcjdJyMCRsp8pIXnhO8EgweviovBvo9bTi9o+dV4GruTbiWPqKC2l889mo7Z11VRMWMZy+KlIPK/l99JYfkH9HBCQEBFJVOdgD3aSp8ugOtJGszAwec4n20+37vgwSSkFFi6+KJFUmuepp2EQLKjToFSZ8kgetML5VrD5JFl0aKnFpSlEzfVkSJ3d2D+naH7y9jNQ8XdgxjV5JUpaW2eenctXXpvD9dbvCUjCMFWtvz2PTM40xM3EOhkqt4PKHilj3+bywhG8ApmQFpmQ1RfPN6E1KnvveCWoOW9n3VjtLrshg+Wcy2fX6wKnXr/m27P3z6iNVw1Yy3HWbhZRUBd/8XgJLlmn4wi1dBALww58l8vUHerBYRPLylMxfpMFqFVm7Us6FdsNnDVxxlY4v3GrB7Q7dVK0WWHeRjo82e1j/74mrI9DHpBMCSddcGv2EKBHo6cXb2ILzYOz8PgORunwdusxwj42uPZtxd4wsIrB10+uYZy1CqQ1NQtmX3IDtlGwgTtRmkaovpN46/FVjLFwtdeizC4OvtenZ+B3RdaETETGsSUln6u1fR6ENn2wkMUDl078M80qq8hwOa+Pwyq6jPYHIhIHVnsMICFR7QoVq7N5IL6O+PoaLUZHIbN0q9jjfAUAlyEFuyw2Xs8f5DgIKlhou4ZBrS0Q7vySvnos0skdYrVf+PK413cxm+0th9znPeAM7netRoGSJ4WKafJVkqPKj9ncmS6/MZN4F8u6q5rCVKfPNfPG3s/juyu1R2/eRN9PEd/61GKVK4OOXm3ntF1VhWTe1BiWrb86h+kDvgALg4dU7sHaOLAeQ3qzix+8v53/W7cLrHl4yua88M5+SlXJpT68rwCuPVLL52Ug9fvY0Iy390j48883jdDa4uP2RUgyJKj78W+Q1CqXA9zcsJXOKgf9ZtwtL8/DVN93dItu2enjjNRd//msyf3gymfvv6kanE6g44cdqFamu9PPRFjmWp6lRfv7eHhGfP/S6j5/9KpG33nDx818n8uFG94TvBiadYVhbmBf9/9QCEtauIv3e28j54ddH1He0XYB1RLsAGUkUsZ9RhF5QKEmYLhuIDapEHN6x1QtHLUifWxS17UREDBdcf3eEAADoPrgjWKN5pIw0+d5Q8EoutIKeRKU8yfolH37JR7X3KMWaBUzTLqDKcyRqu+FgF7tJVKaRpEzDGpDVc0Ptb+HpXUBvh5ftL8kLFVPy4HmYbvtZKUqVwEf/bOKFH1SECQCQYx82PdNAzeHxM2JKkrxzOefm4Tsl9AkAtyPAH754JKoAAMIEQB/vPymryy65tzBqCvBVN2STOUVOGzESAXAmdbUB8vJkD8D/90MrW3Zn8JNHEpk1Z2j5stRqgXUXa/loiwe7TWLtBZHfpfFm0u0EzkwMdyba6VNIv/e2YferTkxBnxWe7tVvt+JqHl2efdupo0EvnT7MpfPpObobT8CBQZ1I1xjaimyVx3F3NKNLD7lipq28SP7WneHI3LPrI1kdBCi02rEbxGl0WXlR7QC+XgvtHw1cL/qTxid5OeTawjTtAjSCjhrvUdr9DbT4qsnVTwNB4LhfzgcVrV00BJSsNFwFyOqvXc636Al0kKhIRyko6Q10oBBUQ+5v1rmyXv7Unh6Ob7NE+xNHMGN5Evmz5DoUr/2qaiRvzZhw9MNO5l2QxkV35bPthWb83qHlyVf3C+Z69ZFKqg8Ob6fXJ/BMyWou/GI+G34fyvqr0Sm5/MEiAGxdY5PlVK2G018xWlsCPHhPN5+91cCr69N4/VUn//3t3gHVTeecp8FgULBzu4dtWzxceoWODW9MrEpo0gmBwfCcqqH3rU2DNzyDWHWEU9NK0OkScTo70elTcNrbUKkNGE2ZOOxtaLQJp4/p0emSsFgqcTlDBld7zQkkvy8sU6axcDpKnZ4G28h3GbGR6Ny5kbyrPx88os8pjNpSm5mDYVoJlo82krTiPCxbPxiTESjUGlKXryNteXRf+cb1fx80Ed9kwCZaOOj6EJ1gZJHhwuBk3BloHrCdU7RhFyNVUxIBdjrXhx2ziz1kq6ciSSLdUjtGIXHI/fVNiMe3Wejt8NJw3EbB7AQUSiGml8vya7OCv/evoDXRvPN4HfMuSCMxQ8vK67LY9uLQVK59u5+WSgc7XmkZpHV0Go7byZ9lYt2deWz9R1Nwwl93Zx6J6RoA3vzd2JRwnFKsor4utNPasc3Djm0eZs9V89K/U3l3gzuoForGpVfoUangYLn8d3O7JQxGAadj4lRCnzohACDahx+yH10VdIRUYxb1ddsoKDyX5qa9iKIfUfRjNKbT1XkClUqHKPrJy19JQ/12CovWUFsTCkITfV7stRUkTAsFkvSphHqO7hnZAw6C9eRhvJYONCnpA7ZTp6WjSjCjzcpFZYrM6TNcNMlpJM5eQvKCVaGqZxFIEburqctuIqN4WUTLtsqd1OyVS38ak3OYe+k35B4kEb/XicPSRHvVbiwN4QXsF17932iNyVHvvuuFbw2p3d4XHw56KLklBx4x+mdKKagj2imFoafG7lNp9aU4AdlTaqj9iQGJsi3youPoh10UzE5gxvIkTuyIbhwuXjTxVdyiUV9mo3y7hZnnpHDR3QVs/1fLkNwz+1RB2/81MgEA8g7ia39fgNag5LL7C3n5p6cwJau56EuyJqDphJ2drw2/ZveZzJytZuU5Wr75UKQAP3bUR0e7SGp6bI27SgUXXKzlkZ9Yef8dN2q1wBvvprFmnY6315/lheYHRBAwrliIY+/Qja1qczL67IKwYwG3E2dDFelFBaeL0wskp0zD4WjD6Qi5XPYdUyjUlMy8jtqayF2IreJImBAA2RV1vIQAkkTn7k3kXPbZAZsJgoC7sQ5tZhbuIZSXVBpMqBNlFYRCpUJQa1CbElGbU9Bl5pA0N3pd1eCwRDFqfWaA7sZj+DzhOlxbR21Eu5YTW1EoVWgMySRll5CUXULTsY00HHn3jHsF6KgZOEfUQO0SFEnM0q1ClAIIQEcgeixHtHa9geguuf3VQQCH3VsAcIpWfFJoZ7TSeNWg/fXlK6o+aA26cR7e2MkVDxWx6NKMqEJAn6AivUB2UnBNgkC1dx+vY+Y5KaTm6lh29eAeOyC7egJU7h15vqlTe3s4/EEn8y9K45ybstn0TANrP58XtBG88kjloC6kA5GcrOC2O4189VsmPtrs4Z0NLlQqeOBrCbzyohOdTuCqa/UkJyvYszP2jnjVuVoMBoHXXnbR2ysvEjZvcnPZlWe5ECj88y/k6mJRkLw+vA3NWDd9PKw++6tO+mh++wUkUaS2Orpqqa8ofUe77PnRf/V/Jj1le8m5/HNhx0xTSoc1xuHSc3QPCrWGrAuvi9nGUFyC6PHQvWMzvu7BjbSZa64ic81Vg7Y7E9upMlre/1fU0pJ9NB7biMMyeLH7uoPh6pSpy28id/aFEUJADPio3jN4zeVY7XJ0M+hRWHCLDqodshtrmqaATm89XoWXJHUmU9WL0Ch07LStD67kSxNWgQeS1dnUesuYalyIxq/DK7qplcppdJfjFd1kaKegVRrp9DWiVulJ0mSiEDVUOw4EvYkG4o5fzgTgH98PFTlqOmln87ONrL0jjwPvtkcIgvRCfb+2kUbT729YSva08EIpm59r5JWfR8/188jHA6dBj+W100flvl7+eNcRHnx6Hrc/UjqoEFAoBTKnGPB7RRqOj861+smHyrj2O8Vc+MV8fvz+cgSFQMAv8dPL99BRP7IJttsiMiNf3qFs2+rh+b+F3mNRhP/7dWjM//uojf99NPwZ/vaUg789Fbrmo80eZk8Nf0++dv/E59madEKg7v7/in1yoNSHMVAnJKHPCd8FiF4P9kEqiH0a6D5yuiB9lPTNANaDewi4XOgLphBwuaKWfhwtdS89jqNu/ArWBLzjtyJqdJVj9csl/lSCGrM6jU5vfdi5GaYVKAUVfil8RddfvRONTm89U42L6Pa1RtxrMLQGJbPOTaGtxkl7bbia6vCmTtbekRd1NxBmNB6DCPv3/1If4VnUn5qDg3sXlW+3UHfURuHcBARhaMOKUeJ72Lz7eB0rrsnClCKr27b8vXHEAuA/mUknBEYy0Q+EbAsId6mQjbnjv10eThWwkSD5/XTt3RJz9a4rmBL8PWn56jEzDPt6Ldgqj9FzdA/u9vFNG2xKK2TMiu6eQZ5+Jh7RSZ3zCAWGOQQkH0ZVUti5RtdxShJW4gz00uauocfXxgzTcqqipCtPVGfiF73Uu44hSgG0Cn3Uew3mZjpnbSpqnYKjH3ZFnKvaL6tJ5l+Uxos/rgjTs/cvmq41RiYu3PJcE6ZUNSnZOs65aXDXzc3PNo44TqA/7/65jnv/NIe569I4sqkz5iQvBiS87gAanRKVWoHfN7q5wGXzs+EPNXz2hzNw9Ph45/HReQL+pzL5hMAYYy6NbhAea9ytjeiywgPRxtM43Ef3oR0xhcCoJn1JRPT5EP0+Ag4bPlsP1hOHcLXU4+kaftnMuZd8NeJY2Qd/wN4Z+cVUKFRoTSlklZxLQloRHTWRWUiVah0rPvfrsGOi6GfPS98bcrtmdyjFRLUjlLnW4e8JO3fMujVozHUGemmjJrgT6H/dwZ5wldUxq1w2stldEdbfYPRFCV94Vz4X3pUftY0pWR1hILZbQsIlMSPSJfjjl2UPneLFiUMSAmPF0Q87aTpp59IvF3JkUycBf+zJ3dblIzVXSWq+jrbq0ddsOP6RrAatOWSNCIxb/3YqggB+P9x8gwWPR+KjHfJ7v3e3l29+vZerrtbxwfse3G6Jb37HxPFjft55y81Lr6RgMAgIAtz2uW56euRn+tFPzPzoB/IOqbBIyVvvpNHUFOCdt93872/loM77HzRyxZU6XnvVzdN/cZCeruCjHelUV/l5520Pf/y93O5QWQb19bJgf+i+Hurqhhd0N1QmnRBIu/vWmOckvx9fYwv2j/cguobmfF/z/O/HamgDUv3c0ArSNL75HLz53JjdV/R6OP6rbwz7urEex2BEMwz73JGRzv0nbDHgo7l8Mw2H34loF83gK0mRX5KhthuM/uqfwVRBo0GjVzL73Oh1MM7kTJWQo9dHT5uHpEwt5jTNeA1x2EgSvPdEPV/87SxmnpMyoO9/w3Ebqbk6iuaZx0QIxGJqsYqrLpd3WkaTEMz/8/dn5Xv+5YnQZ/WW2wz8tZ8uX68X+OH/WDlR7sdkErCfjvDV6QTS0hRotaH+yst93PrZbt7YkMoH73vQauHKq/R85souXnk9hV07vbS3BaivD/CZK7vYuDmdV19x0dIcwOeDqy+P3A2ONZNOCHT+5R8DnldnZ5Dzk2/R+O3/h1pt4NwVD+P12tl78DE8XhsL5txBT28NtQ3yKuz8ld/H47VS27CV1nY5bcHa1T/mo50/JxAI+e/Onfk5jpbLni2CoKAw71yyMhawa///BdskJuSzaN5d7D30Z5QKNWmpJVTXbUaSAigEJeeueDjsXgqFGo1GdqXMyVxEZvpcDpY9ixjw4vU5gvdavugh9h56nEAgtPWeXXIjHV3HcLl7KMhdRWryDHbu/9+I5wUoyj8v+Lx9lBRfhVZr5sjxf6DXp7JqydfZtO37wfML5tyBw9FGduYinK5O9h1+EoC8nBWYTbkcr3iVZQvvp6u7gobmXWjURpYuuI/dB/6I0zU03XZ/hmoY7nPxLJh/OTmz1iGJAaQo+oPRGoYnK3f8sjSYKydWcrU7fz2TpVdmcs5N2REG4td+VcUXfzMr6nWfJPvfbueLv53Fg0/P43e3H8LnEcMCw/p4+aeVLLgondt/XkJrlYO6o+NT0au6ys8TTyWRmqrkz4/Z2fhBbF9+gM/fYQhqJa++RsdLL7j40U/MXHmVjh//0Mr6N9385neJPP6Yg0d/m8hXHggZeIumKNFooK01wAMPmXjuWSc+n8Tzzzm5/gY9j//JTkGBkoNHM/nsjRZamuVFiloNb76dSsAP1149fsJg0qWNGAxfSzvWD7YFXwsItLQdID83uieD3++itf0wGWmhyl+BgJfU5OmhPgQFbR2hwC5JEgmIPs7URU+bcgk9vbXYHa302hqoqt0YXFWmJE+LuJco+nC7u3G7u/H5XUiSiNvdHRQAffcCKUwAaDUJZGbMo73zODZ7M8dPvoo/4CE3a9mgzztcXG4LRkMGwuniN4kJ4SqtQMCL12vH7mgjIPpITpo6JvcdjMayD/DYu8iZuRZD0tgXATqTZX+5jaV/voWlf76FpLlyoZPCW5ax7MnbyL9Bzk6pSTGy5p2HWPKnz1F0m+wuW3DTYlY8dycAq164i4Kb5Ojx8964L9ifPieJzHUlrH71XpY8fgtJ86NXHNPolcw6T3bR7WmNPSkdeCfkUrr4svDEgEc2dgb1+EuvnPji7wPR1STv3i+7rxCvK/purLddfm5BIXDHr2aSkDp+O5p7v9TDg/f38M1vJzBjRuz18D+fd3LDTXoUCtm22NFxWvXzAytvviE/k8EgsHyFhp//0szKVRr0erntzJlqHvqqiW9+vZfOThGLRSQlRT6XlKygq0t+H+rrA2z/2ENOTmhK7tsJjKcAgE+hEAC5/nB/mtsOkJURvWRkV3cllu5KUpOno1TKetKOruOkp84MtklOnEKXZWBvIZVKR1JiIU2t0atkZaTPiXqvkWBOyEPoZ8yWkOjurSYpUY4M7ntelWr0eUYEQYHD1UGCUY5YTEyIroPuQxQnxv9cDPio3vsqgkJJ8fKbJuSee7/8T/Z++Z/0HG0icVY2mWtnsO/+F8i8oJSE6fJk62rpZd8DL5B9ySx0GbJXlkKlRJ2gI+AO6eRFvxjsz9Usrwrbt55i333/ZOa3L0KXGVmLec6aVDSnC5wfeDd28Zrj2yzB7JzzL0pDoQx9Vnwekdd+KaeLuO3nJZxzU/akKYv4wVOy51XpqmQM5tiTbp9tI3OKgW+9uJA5a6KrxxRKYcTPZjDKF7a1BmhvDwRfR8Ptltiw3s3lV8jft927vBQWhhve112gZcN6N1df3sXbG9ysvUD+/peX+3jo/h4OHZSf6eNtHq64UodKBZddrmPL5tDi79Ff2vnOwwmoJlg/M+nUQUNBYQr3dQ4EPLR3RPpeKwQlXd0VWO3N+AMe0lJKaOs4QntHGXNKb0IQFEiSSFpqKZaegfOs6LSJgIDLbSE3exml064GoLpuIzX1W0hPmcnxilcj7jUSNGoTohjuQeL12jCbcsOeNy97WYQaaNgIAtbeBszmPFye7hjCS0CjMSIICiw9E1c/tre1gs66g6QVLow4p1CqmbosUjicqfoZarszSVlSSNvmCkR/gPbNJ0ldVkTzO3JtBARAIeB3nM7zX9OJeWYWtorIbKjRaP3gBBnnT6f+5XBbRf+00Qfeid2X3yty5MMull2diTFJTcmKZMq3h+JA9q5vY9qSRFbfnMMtPynh0i8XcmJ7N70dXjKK9ExZECmAorH2jrwBXURBTtg21EItO19t5bL7CknM0CIoYk+6TzxQxv1PzEVvVpGWr+e+P89l179bsbZ78ftEElI1ZBUbyJ+VwLeXfYw0goI2paUqfvAjMwoFbP7QE5ykb79DTi5XUqLiW98I2S6ef87Jl++T5x2HXeLFl5NQKEChEHj7LTd33W3g2Wdke8K777i5/Q4Dx8oivcAOHvDx9ltu/r0+lddedXOszEf66ajiqko/+/f5uP0OA8887Qyqg+AsMwwPBU1+pHqgvmk7CkX446QkT8PSUw1IdHVXkJE2h7aOI1h6qpAkiaTEIrp7qklLKaWiaogJzySJ1vbDdHWfYt6sW4KHlUp11HuNHeFfmvqm7Syefzf1TcMrfxfZq0CvrYG0lBJc7m56beF6++KiiykuuhhJEjlw9K94PBNbPq/uwBskZZeiS0jDbQvtAAWFMmoqijMn96G2A1j6Z/nvefh7/0Zt1mGvkbfhPqsbU7E8QeuzE1nyx89R9qMN+B2y6sJa3op5ZhbW8hYUGvkzqFApWPrnW5ACEvseCI+i9nTaMBaGr241OiWzz5dVQZZm96AZPg+8086yq2V1z6JL08OEAMCLP6pg1Q3ZKJQCKTk6Vt0Y3RvI54lt5L747oKY5/rY9NeGIQsBv1dk0zONXPfd4gHbVR/s5Te3HORzP55B8WI5DcaKa7IGvGZICAIZl12LJj2Tdkni5rvXk3vrl/C0NpF3p4aOt1/nsi+kkLzqfJAgeeUx1r+5lanf+AGtb7zEovknSVy6irw7F3DV5Y+Rf9dDNPz1j2Rffyu/rpyBu7gBdj9Ndfq1/OzjRBRr1XzpZ/uBXcE+nFUneX7HXN41XIEn0ELOzU6aX36WOx+/lNzb9Pzksc04a6vIuPw6rnw0k7Y3X8IwrZSEtQvgb4+N/j2IwqdSCFhe+HfEMbenh5VLvo7dIbsvCoKS2SU3sPvgY6jVBmrrt7Bs4QNkps+lreMoZSdfpnTa1TS3HsBqG7zmqN3Rhs3eTEHeao6d/BeBgAdJDATvVVnzHmq1IexeI6XDUk7p9KuDrwVBQVb6PJpa92I6rbZxe3o4VPYsyxc9REtbpM+6QZ+KwymvJt3u7jDjqiAoSTDl0N55jJTkabR1HGX61MsxGjKoqH6bnMxQVtSq2veDu42UjFJAQBAEJElixrzrqTjyCunZ81BrjXS3V5BXfD46Qyple55Gb0xj6qwraanfjcPSQHLadIyJObTU7WTWkjvo6ayUDb9iAFEKcPKDJyiefTX1lR8yfe51dLaUYe9txN1Qg9GQgdvWSf60tXSUbUMSAzjt7XR3yoFq81bcQ6OhDsP0UpRGEyDRKJUTaLYiqFRIooi3vRV/TzcJC5ZgKJ6Bu7EO0RPSve/98j+Dv7d+eJLSr11Ay3vHyL1yLif/T44Y71MHLX/mDvbc/Xf5s1HVQdbFM2l9vxxDvpz7pk8dFI2iW5ez76EXw4553QG+vmBb1PZnsvgry9j/+z08+lA9tkYr5sIkUmem0X3KgugXWfnf59K8u4ln/+KhblM1xVfOYP8f9jD9mhJ0SXrKXzjKrFvnsv/3e8g/X1Yx9l1Tt7GaDzdLHGqCnT/fhiHdSOnNs2n4qA59qgFJkrDV99J9ykLpzbNJW5BN+6FWZlw3k97aHn55TxWte2Mni9v0TAObnhncQaCl0sFvbz04aLvB6GpyBw3saRddibPmFO1vvwaANisXZ20lbf9+kaQV52GaKaeAb3wmfLJtW/8v0tZdSn2VrDJ2nOindZAkWl55ntzb76HtzX+hTkxCm5lN84vP4LfKO4nUNZeE9dG7fxemWfNoe+Nl/FZZVdjyyvOozEn4rT1h4yz6ysN079yK40QZmVfeQNuGV0b9npzJp9ImEAunq5PkJDlAKiWpGIVSEzTMOl1ddFpOBo223T3VqFUGsjLm0d4ZrkoSBAVKhZozV9/VdZvIzJhHgimHJHMhapU+eK/mtoMR9xoKgqAAhNP3k/F67bS2HyE9dSYJphxmzbgehVITYY9wONuDnjoKhYrszEWYjFmYjFkkJU2hqiynfQAACllJREFUpV3OryRJIm0dR0lNno7JmEXJtKtQCEo6ukK1EKy2RkzGLKy22MFfYsBHYkohC1Y/SEr6DITTOy9RCiAIKlzOLrT6JNzOrpDQEYTTzyiTnjOfhec8RFONnPqjt6sac0oRitOGaZ/XSUp6CbbufmUUz+ij75ozkXw+TLPm4u+WV/DWfbuxbN0IggJ72WFMs+bJ7UQRXX7hgNXWrMdbaN9awZI/fY62zRXYToWrZ3qPNZP3mVAMirMhPHq3byfQZxgGyDh/Oksev4Wyn7yFtysyrcNQUaiVzP3CAvLXFAWPZS/PRfSL6FL0dFdaSJmRgiSKdBxtp25jNZkLszBmmmjaXk/a3PDn7n9NH167F9EnYmu04uxw0n1K3mmkz80I3gtApVMh+kS6jneQvSwXZ9vQnitZmck07UJ0goES7VL5GVRTMCvTmKM7hyyV/D1WoGSGVl6UFGnmkKrKYZ7uPJQoma1bxUztclKVsmag77oS7VJy1NPIUBVgVoZSnSv1BkRXePCmoWga+Xc9hC6vgK5tG/Hb5UVD7u33UHif7KnmrK3E09aCNku+j99uRWkIV0n34eu20LnpbXJuuoOsa29BaTRhKJ4R0cdAhI3zdIh137hi3Xc0/EcJgbqGj4ITc2b6HCzd4frrto4jpKXMAOSJsaPrOHpdCl2WUCBPQe45rFv9Y4qLLsJoSGf5ogeD5zotJykrf5ElC+5l3qxbcXl66OmtIzN9Dn6/K+JeSuXAng199zIa0llzzg/D7nXi1L+ZOf1alsy/B63WzMGjz+DzRfpN1wVtAgK52UtZMv8elsy/m0Nlz2Kzh1ZkJ6vWM3PGdSyefzdGfRoHy8L7s9oasDtaI2wR/UlIyqfXUktHs+xq67LLE6MxIRunXU6P0GupoaMlpAZzO7robAl5XnU0H+b4/r+TmRvS87c1HSA9R55QbT31ZBcsx97bFN5Ha7igbms6EDlAMYCgUuHrlidk85LlpKy5CABvR1swJ5Xt0D5UScmI/aLG99z9fER3tf/Yw957/0HDq/K9EkvOYfcXnyN9xYWc/M0m3M3puOqS6dpdS/Vfd6BLXUXzW6dIX3kxh761neq/NFLzdAuu5h781ix23f4P9t33T8zTLkRllPXyaUvXhv1MXymX6UxfcSHm6fNIXXweqUvOD8vaKvoCHH3mEA1baoPHyv4m/00K1hRhyDCSPD2kbtIm6fDaZfuFUqdC7JfbX6FShF2j0smC3dXlippkrfLNiuC9+vqTRIn2w20cfnI/pZ+djcY8uFNEpqqAKs9h3JITBQqKNfPJUMu7EpvYjVkpCySRQFjyPSUqfHgREXGKtmCuDI2gD14XwI9eMIY5VwAEXE4U+vBSpM7aShqffRxNajqCIKA0GJH8fpr+LrtMqxLM5Hz2C2gysjCVnPYwFAQSF6+Imd3AWVVB/VO/x3HqOBmXXYvKnBTZxwCEjbPP8i0I9OzfJd93jJl06qA11yRhMivpbPGRXaRBpVbQ2eJly797OP8zSSQkKln/bBcrLjKz6wNrmO97j7Uu7PWUpKUUJi7C7bfiCThRewWqy9aTb56HVmnE3dFEfWcLeQlzUSnkCVty+Kkp24Dbb8PhtWDUpJCbMIcmWxk5CbOwWds4efglFIISjdKAUTLR1hCpjunoKg973dC0g4Yz9Pf1Tdupb4peKjAg+vho18+Dr9NKV5BgmMfOE0+g0BtIKShBk5AMCLTWHCF9zmoaqaJ1x5OkTFuEkJaMQZWHMaMIQSHQXraNKt9BrLUVaBNSsdqaSJm2mDrxBCnTl9DacZJ2t5xj/XiFnN55z8HwbbHRnE3J/JvQGdOwdtfR0rCHGfNvQhAE6k/Jifg6m4/gdoVWxcnp0yld+Dmqj4cSwznt7Xg9oUAxS1s5U0rksqL23kYQFGHCKFoflrZyktNCbr4A3du3Bn+3HdqP7VD436X1pVBwXPsb/xp+fp2+3Y0EOZfcRPvO90kqXYQ6MZXE0oV4uzsxT59DwO2MyOdkObSdpJlLCHhdwXaWQ1HsOf3u0ddH/2utJw9HXgPM/cICTrx0jIR8M/v/bzfpczMouriYOXfOR6VTU7uxGrVBTdFFxez51XaUOhUL7luCPkWP1+4NXpN7juwdJvpFzIVJWOvCE5pNu3oG7i4XJ16SjeRt+5oxFyZhLjBjypHHKw4h3YOIGMzJJCJS5T1M9unVv04wYFIkoxRUBKRwbzSloMIrupBO//NJsjovU1UYvM4qdtHir6VYM59aX2i366qtImH2fOzlR9Hl5COdnsRFjwfHyeOYFy7DNHMu3Tu2BIsxGUvn0PT3JxHUavI+/2WsR+TPlC43dH0Y/RIkuRvrMc9bjGXbRnr37Qz20bX1/QHfm/7j9LaHEsy5G2pJOWfNoO/tcBGkMUg0NepBCEJwENd8KY2AT8LS7kdnUOD1SKRmqti90cq665NpqfXidooIAuz6wErAH3v8uQlzUCk0eAJ2PH4HibpsJElElPw4fT3oVGZEyY9CUCIh4fL1kqzPwy/KKw+1QotCUOENOPEE7BjUyQREHxqlAZu3Hb0qCU/AjkZpoLYnuuvoWJFWugKPrQtjRiHtR7eSVCSrNrx2C4a0PAJeN2LAj7OjgdQZS3H3tGOp3E/KtMUICgUBn4eA14UU8GPMKKSntozUGUvl4x4XCpWKrlP7CHgGznWkUKrDArgUCtWEuY1+0iTPXYGgUCD6vVhPlZGyYBUeSwdqkxml3kjHzvdJW7YO0efFVnWM9JUXIyiVdGx/D01qBmpTEiDJif+WraNzz4ekLV1L597N5F5+Cx3b38NYMD14D0dDFekrL8Z66kjYtaNhyTdWcOy5I7g6nShUiqBaZyxQ6VT43UP7LBgUCUzRzKXGW0a+uoSTnr1kq6bgkGxYA50kKdPRCUZ6xU5KtMs45PqQIs0cWnxV5Kin0e6vJ12Vj0PsRZQCpKtyOeHZS5IynXRVPqc8B5ivP58a7zGsgdMOBUHDcAZI0PH+epLPWUPrq/9AaTSR/4UHsGzfTOLiFUg+H74eC6oEM03P/wWAvM9/GVv5EUS3C0FQkLTyfOqf/B3Z190q25ia6unZ/THJq9ch+bygUND5wQZEtwtfT3ewj9bX/0nmNZ8N2QQEgezrbkWh09G9fQvOuqrgONvefBnDtFJEtwvb0YOY5y0OCiIASZJG7QA86YRAnDhx4sQZGmMhBP6jbAJx4sSJE2d4xIVAnDhx4pzFTAp1UJw4ceLE+WSI7wTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5ywmLgTixIkT5yzm/wPnWEuB8fJyawAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display your wordcloud image\n",
    "\n",
    "myimage = calculate_frequencies(file_contents)\n",
    "plt.imshow(myimage, interpolation = 'nearest')\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If your word cloud image did not appear, go back and rework your `calculate_frequencies` function until you get the desired output.  Definitely check that you passed your frequecy count dictionary into the `generate_from_frequencies` function of `wordcloud`. Once you have correctly displayed your word cloud image, you are all done with this project. Nice work!"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "python-crash-course",
   "graded_item_id": "Z5d28",
   "launcher_item_id": "eSjyd"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
